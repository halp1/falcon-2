<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="16000" height="598" onload="init(evt)" viewBox="0 0 16000 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="15990" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="15990" y="581.00"> </text><svg id="frames" x="10" width="15980" total_samples="424048189"><g><title>[[stack]] (5,979,091 samples, 1.41%)</title><rect x="0.0000%" y="517" width="1.4100%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5979091"/><text x="0.0187%" y="527.50">[[stack]]</text></g><g><title>falcon_2::search::search (5,979,091 samples, 1.41%)</title><rect x="0.0000%" y="501" width="1.4100%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5979091"/><text x="0.0187%" y="511.50">falcon_2::search::search</text></g><g><title>falcon_2::search::expand (5,979,091 samples, 1.41%)</title><rect x="0.0000%" y="485" width="1.4100%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5979091"/><text x="0.0187%" y="495.50">falcon_2::search::expand</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (2,988,251 samples, 0.70%)</title><rect x="0.7053%" y="469" width="0.7047%" height="15" fill="rgb(248,212,6)" fg:x="2990840" fg:w="2988251"/><text x="0.7241%" y="479.50">alloc::collec..</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="517" width="2.5647%" height="15" fill="rgb(208,68,35)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="527.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="501" width="2.5647%" height="15" fill="rgb(232,128,0)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="511.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="485" width="2.5647%" height="15" fill="rgb(207,160,47)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="495.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="469" width="2.5647%" height="15" fill="rgb(228,23,34)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="479.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="453" width="2.5647%" height="15" fill="rgb(218,30,26)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="463.50">[ld-linux-x86-64.so.2]</text></g><g><title>_dl_catch_exception (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="437" width="2.5647%" height="15" fill="rgb(220,122,19)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="447.50">_dl_catch_exception</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="421" width="2.5647%" height="15" fill="rgb(250,228,42)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="431.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="405" width="2.5647%" height="15" fill="rgb(240,193,28)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="415.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="389" width="2.5647%" height="15" fill="rgb(216,20,37)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="399.50">[ld-linux-x86-64.so.2]</text></g><g><title>[ld-linux-x86-64.so.2] (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="373" width="2.5647%" height="15" fill="rgb(206,188,39)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="383.50">[ld-linux-x86-64.so.2]</text></g><g><title>entry_SYSCALL_64_after_hwframe (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="357" width="2.5647%" height="15" fill="rgb(217,207,13)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="367.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="341" width="2.5647%" height="15" fill="rgb(231,73,38)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="351.50">do_syscall_64</text></g><g><title>x64_sys_call (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="325" width="2.5647%" height="15" fill="rgb(225,20,46)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="335.50">x64_sys_call</text></g><g><title>__x64_sys_mmap (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="309" width="2.5647%" height="15" fill="rgb(210,31,41)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="319.50">__x64_sys_mmap</text></g><g><title>ksys_mmap_pgoff (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="293" width="2.5647%" height="15" fill="rgb(221,200,47)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="303.50">ksys_mmap_pgoff</text></g><g><title>vm_mmap_pgoff (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="277" width="2.5647%" height="15" fill="rgb(226,26,5)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="287.50">vm_mmap_pgoff</text></g><g><title>do_mmap (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="261" width="2.5647%" height="15" fill="rgb(249,33,26)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="271.50">do_mmap</text></g><g><title>mmap_region (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="245" width="2.5647%" height="15" fill="rgb(235,183,28)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="255.50">mmap_region</text></g><g><title>vma_interval_tree_insert (10,875,443 samples, 2.56%)</title><rect x="1.4100%" y="229" width="2.5647%" height="15" fill="rgb(221,5,38)" fg:x="5979091" fg:w="10875443"/><text x="1.4288%" y="239.50">vma_interval_tree_insert</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (2,988,016 samples, 0.70%)</title><rect x="3.9747%" y="501" width="0.7046%" height="15" fill="rgb(247,18,42)" fg:x="16854534" fg:w="2988016"/><text x="3.9934%" y="511.50">alloc::collec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,988,549 samples, 0.70%)</title><rect x="4.6793%" y="501" width="0.7048%" height="15" fill="rgb(241,131,45)" fg:x="19842550" fg:w="2988549"/><text x="4.6981%" y="511.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::finish_grow (2,990,236 samples, 0.71%)</title><rect x="5.3841%" y="501" width="0.7052%" height="15" fill="rgb(249,31,29)" fg:x="22831099" fg:w="2990236"/><text x="5.4028%" y="511.50">alloc::raw_ve..</text></g><g><title>falcon_2::game::Game::rotate (2,997,612 samples, 0.71%)</title><rect x="6.0892%" y="501" width="0.7069%" height="15" fill="rgb(225,111,53)" fg:x="25821335" fg:w="2997612"/><text x="6.1080%" y="511.50">falcon_2::gam..</text></g><g><title>falcon_2::game::data::Move::run (5,981,456 samples, 1.41%)</title><rect x="6.7961%" y="501" width="1.4106%" height="15" fill="rgb(238,160,17)" fg:x="28818947" fg:w="5981456"/><text x="6.8149%" y="511.50">falcon_2::game::data::Move::r..</text></g><g><title>[unknown] (23,926,535 samples, 5.64%)</title><rect x="3.9747%" y="517" width="5.6424%" height="15" fill="rgb(214,148,48)" fg:x="16854534" fg:w="23926535"/><text x="3.9934%" y="527.50">[unknown]</text></g><g><title>malloc (5,980,666 samples, 1.41%)</title><rect x="8.2067%" y="501" width="1.4104%" height="15" fill="rgb(232,36,49)" fg:x="34800403" fg:w="5980666"/><text x="8.2255%" y="511.50">malloc</text></g><g><title>__rdl_dealloc (2,989,259 samples, 0.70%)</title><rect x="9.6171%" y="517" width="0.7049%" height="15" fill="rgb(209,103,24)" fg:x="40781069" fg:w="2989259"/><text x="9.6358%" y="527.50">__rdl_dealloc</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,989,259 samples, 0.70%)</title><rect x="9.6171%" y="501" width="0.7049%" height="15" fill="rgb(229,88,8)" fg:x="40781069" fg:w="2989259"/><text x="9.6358%" y="511.50">std::sys::all..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(falcon_2::game::Game,u16,u16)&gt;&gt; (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="229" width="0.7053%" height="15" fill="rgb(213,181,19)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="239.50">core::ptr::dr..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="213" width="0.7053%" height="15" fill="rgb(254,191,54)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="223.50">&lt;alloc::vec::..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(falcon_2::game::Game,u16,u16),alloc::alloc::Global&gt;&gt; (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="197" width="0.7053%" height="15" fill="rgb(241,83,37)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="207.50">core::ptr::dr..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="181" width="0.7053%" height="15" fill="rgb(233,36,39)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="191.50">&lt;&lt;alloc::vec:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(falcon_2::game::Game,u16,u16)&gt;&gt; (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="165" width="0.7053%" height="15" fill="rgb(226,3,54)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="175.50">core::ptr::dr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="149" width="0.7053%" height="15" fill="rgb(245,192,40)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="159.50">&lt;alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="133" width="0.7053%" height="15" fill="rgb(238,167,29)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="143.50">alloc::raw_ve..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="117" width="0.7053%" height="15" fill="rgb(232,182,51)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="127.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::dealloc (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="101" width="0.7053%" height="15" fill="rgb(231,60,39)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="111.50">alloc::alloc:..</text></g><g><title>cfree (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="85" width="0.7053%" height="15" fill="rgb(208,69,12)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="95.50">cfree</text></g><g><title>[libc.so.6] (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="69" width="0.7053%" height="15" fill="rgb(235,93,37)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="79.50">[libc.so.6]</text></g><g><title>[libc.so.6] (2,990,928 samples, 0.71%)</title><rect x="10.3220%" y="53" width="0.7053%" height="15" fill="rgb(213,116,39)" fg:x="43770328" fg:w="2990928"/><text x="10.3408%" y="63.50">[libc.so.6]</text></g><g><title>core::ptr::drop_in_place&lt;falcon_2::game::Game&gt; (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="229" width="1.4103%" height="15" fill="rgb(222,207,29)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="239.50">core::ptr::drop_in_place&lt;falc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::data::Mino&gt;&gt; (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="213" width="1.4103%" height="15" fill="rgb(206,96,30)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="223.50">core::ptr::drop_in_place&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;falcon_2::game::data::Mino&gt;&gt; (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="197" width="1.4103%" height="15" fill="rgb(218,138,4)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="207.50">core::ptr::drop_in_place&lt;allo..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="181" width="1.4103%" height="15" fill="rgb(250,191,14)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="191.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; ..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="165" width="1.4103%" height="15" fill="rgb(239,60,40)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="175.50">alloc::raw_vec::RawVecInner&lt;A..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="149" width="1.4103%" height="15" fill="rgb(206,27,48)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="159.50">&lt;alloc::alloc::Global as core..</text></g><g><title>alloc::alloc::dealloc (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="133" width="1.4103%" height="15" fill="rgb(225,35,8)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="143.50">alloc::alloc::dealloc</text></g><g><title>cfree (5,980,469 samples, 1.41%)</title><rect x="11.0273%" y="117" width="1.4103%" height="15" fill="rgb(250,213,24)" fg:x="46761256" fg:w="5980469"/><text x="11.0461%" y="127.50">cfree</text></g><g><title>[libc.so.6] (2,989,991 samples, 0.71%)</title><rect x="11.7326%" y="101" width="0.7051%" height="15" fill="rgb(247,123,22)" fg:x="49751734" fg:w="2989991"/><text x="11.7513%" y="111.50">[libc.so.6]</text></g><g><title>falcon_2::search::eval::eval (9,219,459 samples, 2.17%)</title><rect x="12.4377%" y="229" width="2.1742%" height="15" fill="rgb(231,138,38)" fg:x="52741725" fg:w="9219459"/><text x="12.4564%" y="239.50">falcon_2::search::eval::eval</text></g><g><title>falcon_2::game::Board::center_height (9,219,459 samples, 2.17%)</title><rect x="12.4377%" y="213" width="2.1742%" height="15" fill="rgb(231,145,46)" fg:x="52741725" fg:w="9219459"/><text x="12.4564%" y="223.50">falcon_2::game::Board::center_height</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="181" width="0.9994%" height="15" fill="rgb(251,118,11)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="191.50">&lt;alloc::collections:..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as alloc::collections::vec_deque::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="165" width="0.9994%" height="15" fill="rgb(217,147,25)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="175.50">&lt;alloc::collections:..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter_wrapping (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="149" width="0.9994%" height="15" fill="rgb(247,81,37)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="159.50">alloc::collections::..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::write_iter (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="133" width="0.9994%" height="15" fill="rgb(209,12,38)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="143.50">alloc::collections::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="117" width="0.9994%" height="15" fill="rgb(227,1,9)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="127.50">core::iter::traits::..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="101" width="0.9994%" height="15" fill="rgb(248,47,43)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="111.50">&lt;core::iter::adapter..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="85" width="0.9994%" height="15" fill="rgb(221,10,30)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="95.50">&lt;core::iter::adapter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="69" width="0.9994%" height="15" fill="rgb(210,229,1)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="79.50">&lt;core::iter::adapter..</text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="53" width="0.9994%" height="15" fill="rgb(222,148,37)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="63.50">&lt;alloc::collections:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,237,809 samples, 1.00%)</title><rect x="17.5064%" y="37" width="0.9994%" height="15" fill="rgb(234,67,33)" fg:x="74235481" fg:w="4237809"/><text x="17.5251%" y="47.50">&lt;core::slice::iter::..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (3,036,109 samples, 0.72%)</title><rect x="18.5057%" y="181" width="0.7160%" height="15" fill="rgb(247,98,35)" fg:x="78473290" fg:w="3036109"/><text x="18.5245%" y="191.50">alloc::collect..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3,036,109 samples, 0.72%)</title><rect x="18.5057%" y="165" width="0.7160%" height="15" fill="rgb(247,138,52)" fg:x="78473290" fg:w="3036109"/><text x="18.5245%" y="175.50">core::slice::&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (3,036,109 samples, 0.72%)</title><rect x="18.5057%" y="149" width="0.7160%" height="15" fill="rgb(213,79,30)" fg:x="78473290" fg:w="3036109"/><text x="18.5245%" y="159.50">core::slice::i..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3,036,109 samples, 0.72%)</title><rect x="18.5057%" y="133" width="0.7160%" height="15" fill="rgb(246,177,23)" fg:x="78473290" fg:w="3036109"/><text x="18.5245%" y="143.50">core::ptr::mut..</text></g><g><title>&lt;falcon_2::game::Game as core::clone::Clone&gt;::clone (13,254,280 samples, 3.13%)</title><rect x="17.5064%" y="213" width="3.1257%" height="15" fill="rgb(230,62,27)" fg:x="74235481" fg:w="13254280"/><text x="17.5251%" y="223.50">&lt;falcon_2::game::Game as core::clone::Clone&gt;::clone</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (13,254,280 samples, 3.13%)</title><rect x="17.5064%" y="197" width="3.1257%" height="15" fill="rgb(216,154,8)" fg:x="74235481" fg:w="13254280"/><text x="17.5251%" y="207.50">&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::with_capacity_in (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="181" width="1.4103%" height="15" fill="rgb(244,35,45)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="191.50">alloc::collections::vec_deque..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="165" width="1.4103%" height="15" fill="rgb(251,115,12)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="175.50">alloc::raw_vec::RawVec&lt;T,A&gt;::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="149" width="1.4103%" height="15" fill="rgb(240,54,50)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="159.50">alloc::raw_vec::RawVecInner&lt;A..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="133" width="1.4103%" height="15" fill="rgb(233,84,52)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="143.50">alloc::raw_vec::RawVecInner&lt;A..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="117" width="1.4103%" height="15" fill="rgb(207,117,47)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="127.50">&lt;alloc::alloc::Global as core..</text></g><g><title>alloc::alloc::Global::alloc_impl (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="101" width="1.4103%" height="15" fill="rgb(249,43,39)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="111.50">alloc::alloc::Global::alloc_i..</text></g><g><title>alloc::alloc::alloc (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="85" width="1.4103%" height="15" fill="rgb(209,38,44)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="95.50">alloc::alloc::alloc</text></g><g><title>malloc (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="69" width="1.4103%" height="15" fill="rgb(236,212,23)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="79.50">malloc</text></g><g><title>[libc.so.6] (5,980,362 samples, 1.41%)</title><rect x="19.2217%" y="53" width="1.4103%" height="15" fill="rgb(242,79,21)" fg:x="81509399" fg:w="5980362"/><text x="19.2405%" y="63.50">[libc.so.6]</text></g><g><title>[libc.so.6] (2,990,777 samples, 0.71%)</title><rect x="20.6320%" y="213" width="0.7053%" height="15" fill="rgb(211,96,35)" fg:x="87489761" fg:w="2990777"/><text x="20.6508%" y="223.50">[libc.so.6]</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (3,901,884 samples, 0.92%)</title><rect x="23.4734%" y="197" width="0.9202%" height="15" fill="rgb(253,215,40)" fg:x="99538731" fg:w="3901884"/><text x="23.4922%" y="207.50">alloc::collections..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (3,901,884 samples, 0.92%)</title><rect x="23.4734%" y="181" width="0.9202%" height="15" fill="rgb(211,81,21)" fg:x="99538731" fg:w="3901884"/><text x="23.4922%" y="191.50">alloc::collections..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,901,884 samples, 0.92%)</title><rect x="23.4734%" y="165" width="0.9202%" height="15" fill="rgb(208,190,38)" fg:x="99538731" fg:w="3901884"/><text x="23.4922%" y="175.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,901,884 samples, 0.92%)</title><rect x="23.4734%" y="149" width="0.9202%" height="15" fill="rgb(235,213,38)" fg:x="99538731" fg:w="3901884"/><text x="23.4922%" y="159.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,901,884 samples, 0.92%)</title><rect x="23.4734%" y="133" width="0.9202%" height="15" fill="rgb(237,122,38)" fg:x="99538731" fg:w="3901884"/><text x="23.4922%" y="143.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (2,990,991 samples, 0.71%)</title><rect x="24.3936%" y="165" width="0.7053%" height="15" fill="rgb(244,218,35)" fg:x="103440615" fg:w="2990991"/><text x="24.4123%" y="175.50">alloc::collec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2,990,991 samples, 0.71%)</title><rect x="24.3936%" y="149" width="0.7053%" height="15" fill="rgb(240,68,47)" fg:x="103440615" fg:w="2990991"/><text x="24.4123%" y="159.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (2,990,991 samples, 0.71%)</title><rect x="24.3936%" y="133" width="0.7053%" height="15" fill="rgb(210,16,53)" fg:x="103440615" fg:w="2990991"/><text x="24.4123%" y="143.50">alloc::raw_ve..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (25,356,551 samples, 5.98%)</title><rect x="21.3373%" y="213" width="5.9796%" height="15" fill="rgb(235,124,12)" fg:x="90480538" fg:w="25356551"/><text x="21.3561%" y="223.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (12,396,474 samples, 2.92%)</title><rect x="24.3936%" y="197" width="2.9234%" height="15" fill="rgb(224,169,11)" fg:x="103440615" fg:w="12396474"/><text x="24.4123%" y="207.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (12,396,474 samples, 2.92%)</title><rect x="24.3936%" y="181" width="2.9234%" height="15" fill="rgb(250,166,2)" fg:x="103440615" fg:w="12396474"/><text x="24.4123%" y="191.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add</text></g><g><title>alloc::collections::vec_deque::wrap_index (9,405,483 samples, 2.22%)</title><rect x="25.0989%" y="165" width="2.2180%" height="15" fill="rgb(242,216,29)" fg:x="106431606" fg:w="9405483"/><text x="25.1177%" y="175.50">alloc::collections::vec_deque::wrap_index</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (14,946,701 samples, 3.52%)</title><rect x="30.8428%" y="197" width="3.5248%" height="15" fill="rgb(230,116,27)" fg:x="130788226" fg:w="14946701"/><text x="30.8615%" y="207.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write</text></g><g><title>core::ptr::write (14,946,701 samples, 3.52%)</title><rect x="30.8428%" y="181" width="3.5248%" height="15" fill="rgb(228,99,48)" fg:x="130788226" fg:w="14946701"/><text x="30.8615%" y="191.50">core::ptr::write</text></g><g><title>alloc::raw_vec::finish_grow (28,166,448 samples, 6.64%)</title><rect x="35.0730%" y="133" width="6.6423%" height="15" fill="rgb(253,11,6)" fg:x="148726556" fg:w="28166448"/><text x="35.0918%" y="143.50">alloc::raw_vec::finish_grow</text></g><g><title>malloc (11,960,913 samples, 2.82%)</title><rect x="38.8947%" y="117" width="2.8206%" height="15" fill="rgb(247,143,39)" fg:x="164932091" fg:w="11960913"/><text x="38.9134%" y="127.50">malloc</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (34,148,617 samples, 8.05%)</title><rect x="34.3675%" y="197" width="8.0530%" height="15" fill="rgb(236,97,10)" fg:x="145734927" fg:w="34148617"/><text x="34.3863%" y="207.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (34,148,617 samples, 8.05%)</title><rect x="34.3675%" y="181" width="8.0530%" height="15" fill="rgb(233,208,19)" fg:x="145734927" fg:w="34148617"/><text x="34.3863%" y="191.50">alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (34,148,617 samples, 8.05%)</title><rect x="34.3675%" y="165" width="8.0530%" height="15" fill="rgb(216,164,2)" fg:x="145734927" fg:w="34148617"/><text x="34.3863%" y="175.50">alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (34,148,617 samples, 8.05%)</title><rect x="34.3675%" y="149" width="8.0530%" height="15" fill="rgb(220,129,5)" fg:x="145734927" fg:w="34148617"/><text x="34.3863%" y="159.50">alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized</text></g><g><title>core::cmp::max (2,990,540 samples, 0.71%)</title><rect x="41.7153%" y="133" width="0.7052%" height="15" fill="rgb(242,17,10)" fg:x="176893004" fg:w="2990540"/><text x="41.7341%" y="143.50">core::cmp::max</text></g><g><title>core::cmp::Ord::max (2,990,540 samples, 0.71%)</title><rect x="41.7153%" y="117" width="0.7052%" height="15" fill="rgb(242,107,0)" fg:x="176893004" fg:w="2990540"/><text x="41.7341%" y="127.50">core::cmp::Or..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (2,990,398 samples, 0.71%)</title><rect x="42.4205%" y="197" width="0.7052%" height="15" fill="rgb(251,28,31)" fg:x="179883544" fg:w="2990398"/><text x="42.4393%" y="207.50">alloc::collec..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (2,990,398 samples, 0.71%)</title><rect x="42.4205%" y="181" width="0.7052%" height="15" fill="rgb(233,223,10)" fg:x="179883544" fg:w="2990398"/><text x="42.4393%" y="191.50">alloc::collec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2,990,398 samples, 0.71%)</title><rect x="42.4205%" y="165" width="0.7052%" height="15" fill="rgb(215,21,27)" fg:x="179883544" fg:w="2990398"/><text x="42.4393%" y="175.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (2,990,398 samples, 0.71%)</title><rect x="42.4205%" y="149" width="0.7052%" height="15" fill="rgb(232,23,21)" fg:x="179883544" fg:w="2990398"/><text x="42.4393%" y="159.50">alloc::raw_ve..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (78,996,533 samples, 18.63%)</title><rect x="27.3170%" y="213" width="18.6291%" height="15" fill="rgb(244,5,23)" fg:x="115837089" fg:w="78996533"/><text x="27.3357%" y="223.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (11,959,680 samples, 2.82%)</title><rect x="43.1257%" y="197" width="2.8204%" height="15" fill="rgb(226,81,46)" fg:x="182873942" fg:w="11959680"/><text x="43.1445%" y="207.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (8,969,938 samples, 2.12%)</title><rect x="43.8308%" y="181" width="2.1153%" height="15" fill="rgb(247,70,30)" fg:x="185863684" fg:w="8969938"/><text x="43.8495%" y="191.50">alloc::collections::vec_deque::VecDeque&lt;T,A&gt;:..</text></g><g><title>alloc::collections::vec_deque::wrap_index (8,969,938 samples, 2.12%)</title><rect x="43.8308%" y="165" width="2.1153%" height="15" fill="rgb(212,68,19)" fg:x="185863684" fg:w="8969938"/><text x="43.8495%" y="175.50">alloc::collections::vec_deque::wrap_index</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,990,940 samples, 0.71%)</title><rect x="45.9461%" y="133" width="0.7053%" height="15" fill="rgb(240,187,13)" fg:x="194833622" fg:w="2990940"/><text x="45.9649%" y="143.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::Global::grow_impl (2,990,940 samples, 0.71%)</title><rect x="45.9461%" y="117" width="0.7053%" height="15" fill="rgb(223,113,26)" fg:x="194833622" fg:w="2990940"/><text x="45.9649%" y="127.50">alloc::alloc:..</text></g><g><title>alloc::alloc::realloc (2,990,940 samples, 0.71%)</title><rect x="45.9461%" y="101" width="0.7053%" height="15" fill="rgb(206,192,2)" fg:x="194833622" fg:w="2990940"/><text x="45.9649%" y="111.50">alloc::alloc:..</text></g><g><title>realloc (2,990,940 samples, 0.71%)</title><rect x="45.9461%" y="85" width="0.7053%" height="15" fill="rgb(241,108,4)" fg:x="194833622" fg:w="2990940"/><text x="45.9649%" y="95.50">realloc</text></g><g><title>[libc.so.6] (2,990,940 samples, 0.71%)</title><rect x="45.9461%" y="69" width="0.7053%" height="15" fill="rgb(247,173,49)" fg:x="194833622" fg:w="2990940"/><text x="45.9649%" y="79.50">[libc.so.6]</text></g><g><title>[libc.so.6] (2,990,940 samples, 0.71%)</title><rect x="45.9461%" y="53" width="0.7053%" height="15" fill="rgb(224,114,35)" fg:x="194833622" fg:w="2990940"/><text x="45.9649%" y="63.50">[libc.so.6]</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,980,776 samples, 1.41%)</title><rect x="45.9461%" y="197" width="1.4104%" height="15" fill="rgb(245,159,27)" fg:x="194833622" fg:w="5980776"/><text x="45.9649%" y="207.50">alloc::raw_vec::RawVec&lt;T,A&gt;::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (5,980,776 samples, 1.41%)</title><rect x="45.9461%" y="181" width="1.4104%" height="15" fill="rgb(245,172,44)" fg:x="194833622" fg:w="5980776"/><text x="45.9649%" y="191.50">alloc::raw_vec::RawVecInner&lt;A..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5,980,776 samples, 1.41%)</title><rect x="45.9461%" y="165" width="1.4104%" height="15" fill="rgb(236,23,11)" fg:x="194833622" fg:w="5980776"/><text x="45.9649%" y="175.50">alloc::raw_vec::RawVecInner&lt;A..</text></g><g><title>alloc::raw_vec::finish_grow (5,980,776 samples, 1.41%)</title><rect x="45.9461%" y="149" width="1.4104%" height="15" fill="rgb(205,117,38)" fg:x="194833622" fg:w="5980776"/><text x="45.9649%" y="159.50">alloc::raw_vec::finish_grow</text></g><g><title>malloc (2,989,836 samples, 0.71%)</title><rect x="46.6514%" y="133" width="0.7051%" height="15" fill="rgb(237,72,25)" fg:x="197824562" fg:w="2989836"/><text x="46.6702%" y="143.50">malloc</text></g><g><title>[libc.so.6] (2,989,836 samples, 0.71%)</title><rect x="46.6514%" y="117" width="0.7051%" height="15" fill="rgb(244,70,9)" fg:x="197824562" fg:w="2989836"/><text x="46.6702%" y="127.50">[libc.so.6]</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15,016,319 samples, 3.54%)</title><rect x="45.9461%" y="213" width="3.5412%" height="15" fill="rgb(217,125,39)" fg:x="194833622" fg:w="15016319"/><text x="45.9649%" y="223.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>core::ptr::write (9,035,543 samples, 2.13%)</title><rect x="47.3565%" y="197" width="2.1308%" height="15" fill="rgb(235,36,10)" fg:x="200814398" fg:w="9035543"/><text x="47.3753%" y="207.50">core::ptr::write</text></g><g><title>[libc.so.6] (9,035,543 samples, 2.13%)</title><rect x="47.3565%" y="181" width="2.1308%" height="15" fill="rgb(251,123,47)" fg:x="200814398" fg:w="9035543"/><text x="47.3753%" y="191.50">[libc.so.6]</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (5,979,581 samples, 1.41%)</title><rect x="49.4873%" y="133" width="1.4101%" height="15" fill="rgb(221,13,13)" fg:x="209849941" fg:w="5979581"/><text x="49.5060%" y="143.50">bitvec::ptr::single::BitPtr&lt;M..</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (5,979,581 samples, 1.41%)</title><rect x="49.4873%" y="117" width="1.4101%" height="15" fill="rgb(238,131,9)" fg:x="209849941" fg:w="5979581"/><text x="49.5060%" y="127.50">bitvec::ptr::single::BitPtr&lt;M..</text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (5,979,581 samples, 1.41%)</title><rect x="49.4873%" y="101" width="1.4101%" height="15" fill="rgb(211,50,8)" fg:x="209849941" fg:w="5979581"/><text x="49.5060%" y="111.50">bitvec::index::BitIdx&lt;R&gt;::off..</text></g><g><title>bitvec::array::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::array::BitArray&lt;A,O&gt;&gt;::index (17,935,007 samples, 4.23%)</title><rect x="49.4873%" y="213" width="4.2295%" height="15" fill="rgb(245,182,24)" fg:x="209849941" fg:w="17935007"/><text x="49.5060%" y="223.50">bitvec::array::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::array::BitArray&lt;A,O&gt;&gt;::ind..</text></g><g><title>bitvec::slice::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for bitvec::slice::BitSlice&lt;T,O&gt;&gt;::index (17,935,007 samples, 4.23%)</title><rect x="49.4873%" y="197" width="4.2295%" height="15" fill="rgb(242,14,37)" fg:x="209849941" fg:w="17935007"/><text x="49.5060%" y="207.50">bitvec::slice::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for bitvec::slice::BitSlice&lt;T,O&gt;&gt;::i..</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::index (17,935,007 samples, 4.23%)</title><rect x="49.4873%" y="181" width="4.2295%" height="15" fill="rgb(246,228,12)" fg:x="209849941" fg:w="17935007"/><text x="49.5060%" y="191.50">&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::index</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get (17,935,007 samples, 4.23%)</title><rect x="49.4873%" y="165" width="4.2295%" height="15" fill="rgb(213,55,15)" fg:x="209849941" fg:w="17935007"/><text x="49.5060%" y="175.50">&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get</text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked (17,935,007 samples, 4.23%)</title><rect x="49.4873%" y="149" width="4.2295%" height="15" fill="rgb(209,9,3)" fg:x="209849941" fg:w="17935007"/><text x="49.5060%" y="159.50">&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::as_ref (11,955,426 samples, 2.82%)</title><rect x="50.8974%" y="133" width="2.8194%" height="15" fill="rgb(230,59,30)" fg:x="215829522" fg:w="11955426"/><text x="50.9162%" y="143.50">bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::as_ref</text></g><g><title>bitvec::ptr::proxy::BitRef&lt;M,T,O&gt;::from_bitptr (11,955,426 samples, 2.82%)</title><rect x="50.8974%" y="117" width="2.8194%" height="15" fill="rgb(209,121,21)" fg:x="215829522" fg:w="11955426"/><text x="50.9162%" y="127.50">bitvec::ptr::proxy::BitRef&lt;M,T,O&gt;::from_bitptr</text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (11,955,426 samples, 2.82%)</title><rect x="50.8974%" y="101" width="2.8194%" height="15" fill="rgb(220,109,13)" fg:x="215829522" fg:w="11955426"/><text x="50.9162%" y="111.50">bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read</text></g><g><title>bitvec::store::BitStore::get_bit (8,965,048 samples, 2.11%)</title><rect x="51.6026%" y="85" width="2.1142%" height="15" fill="rgb(232,18,1)" fg:x="218819900" fg:w="8965048"/><text x="51.6214%" y="95.50">bitvec::store::BitStore::get_bit</text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::select (8,965,048 samples, 2.11%)</title><rect x="51.6026%" y="69" width="2.1142%" height="15" fill="rgb(215,41,42)" fg:x="218819900" fg:w="8965048"/><text x="51.6214%" y="79.50">bitvec::index::BitIdx&lt;R&gt;::select</text></g><g><title>&lt;bitvec::order::Msb0 as bitvec::order::BitOrder&gt;::select (8,965,048 samples, 2.11%)</title><rect x="51.6026%" y="53" width="2.1142%" height="15" fill="rgb(224,123,36)" fg:x="218819900" fg:w="8965048"/><text x="51.6214%" y="63.50">&lt;bitvec::order::Msb0 as bitvec::order::BitOrd..</text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;u8&gt;&gt;::shr (8,965,048 samples, 2.11%)</title><rect x="51.6026%" y="37" width="2.1142%" height="15" fill="rgb(240,125,3)" fg:x="218819900" fg:w="8965048"/><text x="51.6214%" y="47.50">&lt;u64 as core::ops::bit::Shr&lt;u8&gt;&gt;::shr</text></g><g><title>__rust_dealloc (2,990,382 samples, 0.71%)</title><rect x="54.5805%" y="117" width="0.7052%" height="15" fill="rgb(205,98,50)" fg:x="231447700" fg:w="2990382"/><text x="54.5993%" y="127.50">__rust_dealloc</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42,306,583 samples, 9.98%)</title><rect x="53.7168%" y="149" width="9.9768%" height="15" fill="rgb(205,185,37)" fg:x="227784948" fg:w="42306583"/><text x="53.7355%" y="159.50">&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate</text></g><g><title>alloc::alloc::dealloc (42,306,583 samples, 9.98%)</title><rect x="53.7168%" y="133" width="9.9768%" height="15" fill="rgb(238,207,15)" fg:x="227784948" fg:w="42306583"/><text x="53.7355%" y="143.50">alloc::alloc::dealloc</text></g><g><title>cfree (35,653,449 samples, 8.41%)</title><rect x="55.2857%" y="117" width="8.4079%" height="15" fill="rgb(213,199,42)" fg:x="234438082" fg:w="35653449"/><text x="55.3045%" y="127.50">cfree</text></g><g><title>[libc.so.6] (23,528,880 samples, 5.55%)</title><rect x="58.1450%" y="101" width="5.5486%" height="15" fill="rgb(235,201,11)" fg:x="246562651" fg:w="23528880"/><text x="58.1637%" y="111.50">[libc.so.6]</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::data::Move&gt;&gt; (45,296,873 samples, 10.68%)</title><rect x="53.7168%" y="213" width="10.6820%" height="15" fill="rgb(207,46,11)" fg:x="227784948" fg:w="45296873"/><text x="53.7355%" y="223.50">core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::data::Move&gt;&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;falcon_2::game::data::Move&gt;&gt; (45,296,873 samples, 10.68%)</title><rect x="53.7168%" y="197" width="10.6820%" height="15" fill="rgb(241,35,35)" fg:x="227784948" fg:w="45296873"/><text x="53.7355%" y="207.50">core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;falcon_2::game::data::Move&gt;&gt;</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45,296,873 samples, 10.68%)</title><rect x="53.7168%" y="181" width="10.6820%" height="15" fill="rgb(243,32,47)" fg:x="227784948" fg:w="45296873"/><text x="53.7355%" y="191.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (45,296,873 samples, 10.68%)</title><rect x="53.7168%" y="165" width="10.6820%" height="15" fill="rgb(247,202,23)" fg:x="227784948" fg:w="45296873"/><text x="53.7355%" y="175.50">alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (2,990,290 samples, 0.71%)</title><rect x="63.6936%" y="149" width="0.7052%" height="15" fill="rgb(219,102,11)" fg:x="270091531" fg:w="2990290"/><text x="63.7123%" y="159.50">alloc::raw_ve..</text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;&amp;u8&gt;&gt;::shl (8,971,831 samples, 2.12%)</title><rect x="71.2613%" y="165" width="2.1158%" height="15" fill="rgb(243,110,44)" fg:x="302182108" fg:w="8971831"/><text x="71.2800%" y="175.50">&lt;u64 as core::ops::bit::Shl&lt;&amp;u8&gt;&gt;::shl</text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;u8&gt;&gt;::shl (8,971,831 samples, 2.12%)</title><rect x="71.2613%" y="149" width="2.1158%" height="15" fill="rgb(222,74,54)" fg:x="302182108" fg:w="8971831"/><text x="71.2800%" y="159.50">&lt;u64 as core::ops::bit::Shl&lt;u8&gt;&gt;::shl</text></g><g><title>falcon_2::game::Game::regen_collision_map (41,062,851 samples, 9.68%)</title><rect x="64.3988%" y="213" width="9.6835%" height="15" fill="rgb(216,99,12)" fg:x="273081821" fg:w="41062851"/><text x="64.4175%" y="223.50">falcon_2::game::Game::regen_collision_map</text></g><g><title>falcon_2::game::Board::collision_map (41,062,851 samples, 9.68%)</title><rect x="64.3988%" y="197" width="9.6835%" height="15" fill="rgb(226,22,26)" fg:x="273081821" fg:w="41062851"/><text x="64.4175%" y="207.50">falcon_2::game::Board::collision_map</text></g><g><title>falcon_2::game::CollisionMap::new (36,166,736 samples, 8.53%)</title><rect x="65.5534%" y="181" width="8.5289%" height="15" fill="rgb(217,163,10)" fg:x="277977936" fg:w="36166736"/><text x="65.5721%" y="191.50">falcon_2::game::CollisionMap::new</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2,990,733 samples, 0.71%)</title><rect x="73.3770%" y="165" width="0.7053%" height="15" fill="rgb(213,25,53)" fg:x="311153939" fg:w="2990733"/><text x="73.3958%" y="175.50">core::slice::..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2,990,733 samples, 0.71%)</title><rect x="73.3770%" y="149" width="0.7053%" height="15" fill="rgb(252,105,26)" fg:x="311153939" fg:w="2990733"/><text x="73.3958%" y="159.50">&lt;usize as cor..</text></g><g><title>core::slice::index::get_noubcheck (2,990,733 samples, 0.71%)</title><rect x="73.3770%" y="133" width="0.7053%" height="15" fill="rgb(220,39,43)" fg:x="311153939" fg:w="2990733"/><text x="73.3958%" y="143.50">core::slice::..</text></g><g><title>falcon_2::game::Game::rotate (31,149,442 samples, 7.35%)</title><rect x="75.5029%" y="197" width="7.3457%" height="15" fill="rgb(229,68,48)" fg:x="320168676" fg:w="31149442"/><text x="75.5216%" y="207.50">falcon_2::game::Game::rotate</text></g><g><title>falcon_2::game::CollisionMap::test (8,969,577 samples, 2.12%)</title><rect x="80.7334%" y="181" width="2.1152%" height="15" fill="rgb(252,8,32)" fg:x="342348541" fg:w="8969577"/><text x="80.7522%" y="191.50">falcon_2::game::CollisionMap::test</text></g><g><title>core::option::Option&lt;T&gt;::map (2,989,070 samples, 0.70%)</title><rect x="82.1437%" y="165" width="0.7049%" height="15" fill="rgb(223,20,43)" fg:x="348329048" fg:w="2989070"/><text x="82.1625%" y="175.50">core::option:..</text></g><g><title>falcon_2::game::CollisionMap::test::_{{closure}} (2,989,070 samples, 0.70%)</title><rect x="82.1437%" y="149" width="0.7049%" height="15" fill="rgb(229,81,49)" fg:x="348329048" fg:w="2989070"/><text x="82.1625%" y="159.50">falcon_2::gam..</text></g><g><title>falcon_2::game::data::Move::run (64,080,895 samples, 15.11%)</title><rect x="74.0823%" y="213" width="15.1117%" height="15" fill="rgb(236,28,36)" fg:x="314144672" fg:w="64080895"/><text x="74.1011%" y="223.50">falcon_2::game::data::Move::run</text></g><g><title>falcon_2::game::Game::soft_drop (26,907,449 samples, 6.35%)</title><rect x="82.8486%" y="197" width="6.3454%" height="15" fill="rgb(249,185,26)" fg:x="351318118" fg:w="26907449"/><text x="82.8674%" y="207.50">falcon_2::game::Game::soft_drop</text></g><g><title>falcon_2::game::CollisionMap::test (5,981,773 samples, 1.41%)</title><rect x="87.7834%" y="181" width="1.4106%" height="15" fill="rgb(249,174,33)" fg:x="372243794" fg:w="5981773"/><text x="87.8021%" y="191.50">falcon_2::game::CollisionMap:..</text></g><g><title>core::option::Option&lt;T&gt;::map (5,981,773 samples, 1.41%)</title><rect x="87.7834%" y="165" width="1.4106%" height="15" fill="rgb(233,201,37)" fg:x="372243794" fg:w="5981773"/><text x="87.8021%" y="175.50">core::option::Option&lt;T&gt;::map</text></g><g><title>falcon_2::game::CollisionMap::test::_{{closure}} (5,981,773 samples, 1.41%)</title><rect x="87.7834%" y="149" width="1.4106%" height="15" fill="rgb(221,78,26)" fg:x="372243794" fg:w="5981773"/><text x="87.8021%" y="159.50">falcon_2::game::CollisionMap:..</text></g><g><title>falcon_2::search::compressor::compress_key (29,912,123 samples, 7.05%)</title><rect x="89.1940%" y="213" width="7.0539%" height="15" fill="rgb(250,127,30)" fg:x="378225567" fg:w="29912123"/><text x="89.2128%" y="223.50">falcon_2::search::compressor::compress_key</text></g><g><title>_start (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="517" width="88.0413%" height="15" fill="rgb(230,49,44)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="527.50">_start</text></g><g><title>__libc_start_main (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="501" width="88.0413%" height="15" fill="rgb(229,67,23)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="511.50">__libc_start_main</text></g><g><title>[libc.so.6] (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="485" width="88.0413%" height="15" fill="rgb(249,83,47)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="495.50">[libc.so.6]</text></g><g><title>main (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="469" width="88.0413%" height="15" fill="rgb(215,43,3)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="453" width="88.0413%" height="15" fill="rgb(238,154,13)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="437" width="88.0413%" height="15" fill="rgb(219,56,2)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="421" width="88.0413%" height="15" fill="rgb(233,0,4)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="405" width="88.0413%" height="15" fill="rgb(235,30,7)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="389" width="88.0413%" height="15" fill="rgb(250,79,13)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="399.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="373" width="88.0413%" height="15" fill="rgb(211,146,34)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="357" width="88.0413%" height="15" fill="rgb(228,22,38)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="341" width="88.0413%" height="15" fill="rgb(235,168,5)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="351.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="325" width="88.0413%" height="15" fill="rgb(221,155,16)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="309" width="88.0413%" height="15" fill="rgb(215,215,53)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="319.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="293" width="88.0413%" height="15" fill="rgb(223,4,10)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="303.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="277" width="88.0413%" height="15" fill="rgb(234,103,6)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>falcon_2::main (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="261" width="88.0413%" height="15" fill="rgb(227,97,0)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="271.50">falcon_2::main</text></g><g><title>falcon_2::search::search (373,337,530 samples, 88.04%)</title><rect x="10.3220%" y="245" width="88.0413%" height="15" fill="rgb(234,150,53)" fg:x="43770328" fg:w="373337530"/><text x="10.3408%" y="255.50">falcon_2::search::search</text></g><g><title>falcon_2::search::expand (355,146,674 samples, 83.75%)</title><rect x="14.6118%" y="229" width="83.7515%" height="15" fill="rgb(228,201,54)" fg:x="61961184" fg:w="355146674"/><text x="14.6306%" y="239.50">falcon_2::search::expand</text></g><g><title>falcon_2::search::compressor::decompress_key (8,970,168 samples, 2.12%)</title><rect x="96.2480%" y="213" width="2.1154%" height="15" fill="rgb(222,22,37)" fg:x="408137690" fg:w="8970168"/><text x="96.2667%" y="223.50">falcon_2::search::compressor::decompress_key</text></g><g><title>__x64_sys_execve (934,452 samples, 0.22%)</title><rect x="98.3633%" y="469" width="0.2204%" height="15" fill="rgb(237,53,32)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="479.50">__..</text></g><g><title>do_execveat_common.isra.0 (934,452 samples, 0.22%)</title><rect x="98.3633%" y="453" width="0.2204%" height="15" fill="rgb(233,25,53)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="463.50">do..</text></g><g><title>bprm_execve (934,452 samples, 0.22%)</title><rect x="98.3633%" y="437" width="0.2204%" height="15" fill="rgb(210,40,34)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="447.50">bp..</text></g><g><title>bprm_execve.part.0 (934,452 samples, 0.22%)</title><rect x="98.3633%" y="421" width="0.2204%" height="15" fill="rgb(241,220,44)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="431.50">bp..</text></g><g><title>exec_binprm (934,452 samples, 0.22%)</title><rect x="98.3633%" y="405" width="0.2204%" height="15" fill="rgb(235,28,35)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="415.50">ex..</text></g><g><title>search_binary_handler (934,452 samples, 0.22%)</title><rect x="98.3633%" y="389" width="0.2204%" height="15" fill="rgb(210,56,17)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="399.50">se..</text></g><g><title>load_elf_binary (934,452 samples, 0.22%)</title><rect x="98.3633%" y="373" width="0.2204%" height="15" fill="rgb(224,130,29)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="383.50">lo..</text></g><g><title>setup_arg_pages (934,452 samples, 0.22%)</title><rect x="98.3633%" y="357" width="0.2204%" height="15" fill="rgb(235,212,8)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="367.50">se..</text></g><g><title>mprotect_fixup (934,452 samples, 0.22%)</title><rect x="98.3633%" y="341" width="0.2204%" height="15" fill="rgb(223,33,50)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="351.50">mp..</text></g><g><title>change_protection (934,452 samples, 0.22%)</title><rect x="98.3633%" y="325" width="0.2204%" height="15" fill="rgb(219,149,13)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="335.50">ch..</text></g><g><title>change_p4d_range (934,452 samples, 0.22%)</title><rect x="98.3633%" y="309" width="0.2204%" height="15" fill="rgb(250,156,29)" fg:x="417107858" fg:w="934452"/><text x="98.3821%" y="319.50">ch..</text></g><g><title>entry_SYSCALL_64_after_hwframe (3,925,036 samples, 0.93%)</title><rect x="98.3633%" y="517" width="0.9256%" height="15" fill="rgb(216,193,19)" fg:x="417107858" fg:w="3925036"/><text x="98.3821%" y="527.50">entry_SYSCALL_64_a..</text></g><g><title>do_syscall_64 (3,925,036 samples, 0.93%)</title><rect x="98.3633%" y="501" width="0.9256%" height="15" fill="rgb(216,135,14)" fg:x="417107858" fg:w="3925036"/><text x="98.3821%" y="511.50">do_syscall_64</text></g><g><title>x64_sys_call (3,925,036 samples, 0.93%)</title><rect x="98.3633%" y="485" width="0.9256%" height="15" fill="rgb(241,47,5)" fg:x="417107858" fg:w="3925036"/><text x="98.3821%" y="495.50">x64_sys_call</text></g><g><title>__x64_sys_exit_group (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="469" width="0.7052%" height="15" fill="rgb(233,42,35)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="479.50">__x64_sys_exi..</text></g><g><title>do_group_exit (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="453" width="0.7052%" height="15" fill="rgb(231,13,6)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="463.50">do_group_exit</text></g><g><title>do_exit (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="437" width="0.7052%" height="15" fill="rgb(207,181,40)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="447.50">do_exit</text></g><g><title>exit_mm (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="421" width="0.7052%" height="15" fill="rgb(254,173,49)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="431.50">exit_mm</text></g><g><title>mmput (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="405" width="0.7052%" height="15" fill="rgb(221,1,38)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="415.50">mmput</text></g><g><title>__mmput (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="389" width="0.7052%" height="15" fill="rgb(206,124,46)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="399.50">__mmput</text></g><g><title>exit_mmap (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="373" width="0.7052%" height="15" fill="rgb(249,21,11)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="383.50">exit_mmap</text></g><g><title>unmap_vmas (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="357" width="0.7052%" height="15" fill="rgb(222,201,40)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="367.50">unmap_vmas</text></g><g><title>unmap_single_vma (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="341" width="0.7052%" height="15" fill="rgb(235,61,29)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="351.50">unmap_single_..</text></g><g><title>unmap_page_range (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="325" width="0.7052%" height="15" fill="rgb(219,207,3)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="335.50">unmap_page_ra..</text></g><g><title>zap_pmd_range.isra.0 (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="309" width="0.7052%" height="15" fill="rgb(222,56,46)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="319.50">zap_pmd_range..</text></g><g><title>zap_pte_range (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="293" width="0.7052%" height="15" fill="rgb(239,76,54)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="303.50">zap_pte_range</text></g><g><title>folio_remove_rmap_ptes (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="277" width="0.7052%" height="15" fill="rgb(231,124,27)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="287.50">folio_remove_..</text></g><g><title>__lruvec_stat_mod_folio (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="261" width="0.7052%" height="15" fill="rgb(249,195,6)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="271.50">__lruvec_stat..</text></g><g><title>__mod_lruvec_state (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="245" width="0.7052%" height="15" fill="rgb(237,174,47)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="255.50">__mod_lruvec_..</text></g><g><title>__mod_node_page_state (2,990,584 samples, 0.71%)</title><rect x="98.5837%" y="229" width="0.7052%" height="15" fill="rgb(206,201,31)" fg:x="418042310" fg:w="2990584"/><text x="98.6024%" y="239.50">__mod_node_pa..</text></g><g><title>falcon-2 (424,023,920 samples, 99.99%)</title><rect x="0.0000%" y="533" width="99.9943%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="424023920"/><text x="0.0187%" y="543.50">falcon-2</text></g><g><title>falcon_2::game::Game::rotate (2,991,026 samples, 0.71%)</title><rect x="99.2889%" y="517" width="0.7054%" height="15" fill="rgb(248,177,22)" fg:x="421032894" fg:w="2991026"/><text x="99.3077%" y="527.50">falcon_2::gam..</text></g><g><title>all (424,048,189 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="424048189"/><text x="0.0187%" y="559.50"></text></g></svg></svg>