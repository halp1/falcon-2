<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="4000" height="518" onload="init(evt)" viewBox="0 0 4000 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="3990" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="3990" y="501.00"> </text><svg id="frames" x="10" width="3980" total_samples="30704"><g><title>`0x7FF937BD14D0 (4 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.0750%" y="463.50"></text></g><g><title>`0x7FF937B6BC1A (7 samples, 0.02%)</title><rect x="0.0261%" y="389" width="0.0228%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="7"/><text x="0.1011%" y="399.50"></text></g><g><title>`0x7FF937B6BFEC (4 samples, 0.01%)</title><rect x="0.0358%" y="373" width="0.0130%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="4"/><text x="0.1108%" y="383.50"></text></g><g><title>`0x7FF937B35CB1 (14 samples, 0.05%)</title><rect x="0.0195%" y="421" width="0.0456%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="14"/><text x="0.0945%" y="431.50"></text></g><g><title>`0x7FF937B34257 (12 samples, 0.04%)</title><rect x="0.0261%" y="405" width="0.0391%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="12"/><text x="0.1011%" y="415.50"></text></g><g><title>`0x7FF937B6BCE1 (5 samples, 0.02%)</title><rect x="0.0489%" y="389" width="0.0163%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="5"/><text x="0.1239%" y="399.50"></text></g><g><title>`0x7FF937B76020 (8 samples, 0.03%)</title><rect x="0.0684%" y="293" width="0.0261%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="8"/><text x="0.1434%" y="303.50"></text></g><g><title>`0x7FF937B6BCF4 (8 samples, 0.03%)</title><rect x="0.0684%" y="277" width="0.0261%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="8"/><text x="0.1434%" y="287.50"></text></g><g><title>`0x7FF937B6C2DD (7 samples, 0.02%)</title><rect x="0.0717%" y="261" width="0.0228%" height="15" fill="rgb(218,30,26)" fg:x="22" fg:w="7"/><text x="0.1467%" y="271.50"></text></g><g><title>`0x7FF937B6D42C (6 samples, 0.02%)</title><rect x="0.0749%" y="245" width="0.0195%" height="15" fill="rgb(220,122,19)" fg:x="23" fg:w="6"/><text x="0.1499%" y="255.50"></text></g><g><title>`0x7FF937B70739 (4 samples, 0.01%)</title><rect x="0.0814%" y="229" width="0.0130%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="4"/><text x="0.1564%" y="239.50"></text></g><g><title>`0x7FF934E50046 (11 samples, 0.04%)</title><rect x="0.0684%" y="405" width="0.0358%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="11"/><text x="0.1434%" y="415.50"></text></g><g><title>`0x7FF934E3553D (11 samples, 0.04%)</title><rect x="0.0684%" y="389" width="0.0358%" height="15" fill="rgb(216,20,37)" fg:x="21" fg:w="11"/><text x="0.1434%" y="399.50"></text></g><g><title>`0x7FF934DC423B (11 samples, 0.04%)</title><rect x="0.0684%" y="373" width="0.0358%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="11"/><text x="0.1434%" y="383.50"></text></g><g><title>`0x7FF934E26225 (11 samples, 0.04%)</title><rect x="0.0684%" y="357" width="0.0358%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="11"/><text x="0.1434%" y="367.50"></text></g><g><title>`0x7FF935322446 (11 samples, 0.04%)</title><rect x="0.0684%" y="341" width="0.0358%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="11"/><text x="0.1434%" y="351.50"></text></g><g><title>`0x7FF937B39B30 (11 samples, 0.04%)</title><rect x="0.0684%" y="325" width="0.0358%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="11"/><text x="0.1434%" y="335.50"></text></g><g><title>`0x7FF937B75CA0 (11 samples, 0.04%)</title><rect x="0.0684%" y="309" width="0.0358%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="11"/><text x="0.1434%" y="319.50"></text></g><g><title>`0x7FF8B145059B (13 samples, 0.04%)</title><rect x="1.7913%" y="325" width="0.0423%" height="15" fill="rgb(221,200,47)" fg:x="550" fg:w="13"/><text x="1.8663%" y="335.50"></text></g><g><title>`0x7FF8B1451A89 (79 samples, 0.26%)</title><rect x="1.8923%" y="325" width="0.2573%" height="15" fill="rgb(226,26,5)" fg:x="581" fg:w="79"/><text x="1.9673%" y="335.50"></text></g><g><title>`0x7FF8B14505E4 (14 samples, 0.05%)</title><rect x="2.1854%" y="293" width="0.0456%" height="15" fill="rgb(249,33,26)" fg:x="671" fg:w="14"/><text x="2.2604%" y="303.50"></text></g><g><title>`0x7FF8B14505F3 (13 samples, 0.04%)</title><rect x="2.2408%" y="293" width="0.0423%" height="15" fill="rgb(235,183,28)" fg:x="688" fg:w="13"/><text x="2.3158%" y="303.50"></text></g><g><title>`0x7FF8B14505F7 (18 samples, 0.06%)</title><rect x="2.2831%" y="293" width="0.0586%" height="15" fill="rgb(221,5,38)" fg:x="701" fg:w="18"/><text x="2.3581%" y="303.50"></text></g><g><title>`0x7FF8B14505FC (18 samples, 0.06%)</title><rect x="2.3417%" y="293" width="0.0586%" height="15" fill="rgb(247,18,42)" fg:x="719" fg:w="18"/><text x="2.4167%" y="303.50"></text></g><g><title>`0x7FF8B1450601 (16 samples, 0.05%)</title><rect x="2.4003%" y="293" width="0.0521%" height="15" fill="rgb(241,131,45)" fg:x="737" fg:w="16"/><text x="2.4753%" y="303.50"></text></g><g><title>`0x7FF8B1450606 (10 samples, 0.03%)</title><rect x="2.4524%" y="293" width="0.0326%" height="15" fill="rgb(249,31,29)" fg:x="753" fg:w="10"/><text x="2.5274%" y="303.50"></text></g><g><title>`0x7FF8B1450626 (9 samples, 0.03%)</title><rect x="2.4850%" y="293" width="0.0293%" height="15" fill="rgb(225,111,53)" fg:x="763" fg:w="9"/><text x="2.5600%" y="303.50"></text></g><g><title>`0x7FF8B145062E (13 samples, 0.04%)</title><rect x="2.5143%" y="293" width="0.0423%" height="15" fill="rgb(238,160,17)" fg:x="772" fg:w="13"/><text x="2.5893%" y="303.50"></text></g><g><title>`0x7FF8B1450636 (20 samples, 0.07%)</title><rect x="2.5567%" y="293" width="0.0651%" height="15" fill="rgb(214,148,48)" fg:x="785" fg:w="20"/><text x="2.6317%" y="303.50"></text></g><g><title>`0x7FF8B145063E (18 samples, 0.06%)</title><rect x="2.6218%" y="293" width="0.0586%" height="15" fill="rgb(232,36,49)" fg:x="805" fg:w="18"/><text x="2.6968%" y="303.50"></text></g><g><title>`0x7FF8B1450646 (7 samples, 0.02%)</title><rect x="2.6804%" y="293" width="0.0228%" height="15" fill="rgb(209,103,24)" fg:x="823" fg:w="7"/><text x="2.7554%" y="303.50"></text></g><g><title>`0x7FF8B145068F (4 samples, 0.01%)</title><rect x="2.7130%" y="293" width="0.0130%" height="15" fill="rgb(229,88,8)" fg:x="833" fg:w="4"/><text x="2.7880%" y="303.50"></text></g><g><title>`0x7FF8B1450699 (4 samples, 0.01%)</title><rect x="2.7260%" y="293" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="837" fg:w="4"/><text x="2.8010%" y="303.50"></text></g><g><title>`0x7FF8B14506A3 (5 samples, 0.02%)</title><rect x="2.7391%" y="293" width="0.0163%" height="15" fill="rgb(254,191,54)" fg:x="841" fg:w="5"/><text x="2.8141%" y="303.50"></text></g><g><title>`0x7FF8B14506C1 (6 samples, 0.02%)</title><rect x="2.7684%" y="293" width="0.0195%" height="15" fill="rgb(241,83,37)" fg:x="850" fg:w="6"/><text x="2.8434%" y="303.50"></text></g><g><title>`0x7FF8B14506CB (4 samples, 0.01%)</title><rect x="2.7879%" y="293" width="0.0130%" height="15" fill="rgb(233,36,39)" fg:x="856" fg:w="4"/><text x="2.8629%" y="303.50"></text></g><g><title>`0x7FF8B14506DC (6 samples, 0.02%)</title><rect x="2.8075%" y="293" width="0.0195%" height="15" fill="rgb(226,3,54)" fg:x="862" fg:w="6"/><text x="2.8825%" y="303.50"></text></g><g><title>`0x7FF8B14506E3 (6 samples, 0.02%)</title><rect x="2.8270%" y="293" width="0.0195%" height="15" fill="rgb(245,192,40)" fg:x="868" fg:w="6"/><text x="2.9020%" y="303.50"></text></g><g><title>`0x7FF8B14506F8 (5 samples, 0.02%)</title><rect x="2.8498%" y="293" width="0.0163%" height="15" fill="rgb(238,167,29)" fg:x="875" fg:w="5"/><text x="2.9248%" y="303.50"></text></g><g><title>`0x7FF8B14506FF (9 samples, 0.03%)</title><rect x="2.8661%" y="293" width="0.0293%" height="15" fill="rgb(232,182,51)" fg:x="880" fg:w="9"/><text x="2.9411%" y="303.50"></text></g><g><title>`0x7FF8B1450706 (9 samples, 0.03%)</title><rect x="2.8954%" y="293" width="0.0293%" height="15" fill="rgb(231,60,39)" fg:x="889" fg:w="9"/><text x="2.9704%" y="303.50"></text></g><g><title>falcon-2.exe`alloc::vec::Vec&lt;falcon_2::search::SearchState,alloc::alloc::Global&gt;::push (239 samples, 0.78%)</title><rect x="2.1496%" y="325" width="0.7784%" height="15" fill="rgb(208,69,12)" fg:x="660" fg:w="239"/><text x="2.2246%" y="335.50">fa..</text></g><g><title>falcon-2.exe`core::ptr::write (238 samples, 0.78%)</title><rect x="2.1528%" y="309" width="0.7751%" height="15" fill="rgb(235,93,37)" fg:x="661" fg:w="238"/><text x="2.2278%" y="319.50">fa..</text></g><g><title>falcon-2.exe`alloc::vec::Vec&lt;falcon_2::search::SearchState,alloc::alloc::Global&gt;::with_capacity (4 samples, 0.01%)</title><rect x="2.9280%" y="325" width="0.0130%" height="15" fill="rgb(213,116,39)" fg:x="899" fg:w="4"/><text x="3.0030%" y="335.50"></text></g><g><title>falcon-2.exe`alloc::vec::Vec&lt;falcon_2::search::SearchState,alloc::alloc::Global&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="2.9280%" y="309" width="0.0130%" height="15" fill="rgb(222,207,29)" fg:x="899" fg:w="4"/><text x="3.0030%" y="319.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVec&lt;falcon_2::search::SearchState,alloc::alloc::Global&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="2.9280%" y="293" width="0.0130%" height="15" fill="rgb(206,96,30)" fg:x="899" fg:w="4"/><text x="3.0030%" y="303.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (4 samples, 0.01%)</title><rect x="2.9280%" y="277" width="0.0130%" height="15" fill="rgb(218,138,4)" fg:x="899" fg:w="4"/><text x="3.0030%" y="287.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (4 samples, 0.01%)</title><rect x="2.9280%" y="261" width="0.0130%" height="15" fill="rgb(250,191,14)" fg:x="899" fg:w="4"/><text x="3.0030%" y="271.50"></text></g><g><title>`0x7FF937B62B99 (4 samples, 0.01%)</title><rect x="2.9280%" y="245" width="0.0130%" height="15" fill="rgb(239,60,40)" fg:x="899" fg:w="4"/><text x="3.0030%" y="255.50"></text></g><g><title>`0x7FF937B27DBE (4 samples, 0.01%)</title><rect x="2.9280%" y="229" width="0.0130%" height="15" fill="rgb(206,27,48)" fg:x="899" fg:w="4"/><text x="3.0030%" y="239.50"></text></g><g><title>`0x7FF937B93312 (4 samples, 0.01%)</title><rect x="2.9280%" y="213" width="0.0130%" height="15" fill="rgb(225,35,8)" fg:x="899" fg:w="4"/><text x="3.0030%" y="223.50"></text></g><g><title>falcon-2.exe`alloc::vec::impl$13::index(alloc::vec::Vec (48 samples, 0.16%)</title><rect x="2.9410%" y="325" width="0.1563%" height="15" fill="rgb(250,213,24)" fg:x="903" fg:w="48"/><text x="3.0160%" y="335.50"></text></g><g><title>falcon-2.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (48 samples, 0.16%)</title><rect x="2.9410%" y="309" width="0.1563%" height="15" fill="rgb(247,123,22)" fg:x="903" fg:w="48"/><text x="3.0160%" y="319.50"></text></g><g><title>falcon-2.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (48 samples, 0.16%)</title><rect x="2.9410%" y="293" width="0.1563%" height="15" fill="rgb(231,138,38)" fg:x="903" fg:w="48"/><text x="3.0160%" y="303.50"></text></g><g><title>`0x7FF8B1450571 (23 samples, 0.07%)</title><rect x="3.1201%" y="277" width="0.0749%" height="15" fill="rgb(231,145,46)" fg:x="958" fg:w="23"/><text x="3.1951%" y="287.50"></text></g><g><title>`0x7FF8B145059B (4 samples, 0.01%)</title><rect x="3.1983%" y="277" width="0.0130%" height="15" fill="rgb(251,118,11)" fg:x="982" fg:w="4"/><text x="3.2733%" y="287.50"></text></g><g><title>`0x7FF8B14505A2 (458 samples, 1.49%)</title><rect x="3.2113%" y="277" width="1.4917%" height="15" fill="rgb(217,147,25)" fg:x="986" fg:w="458"/><text x="3.2863%" y="287.50">`0x7FF..</text></g><g><title>`0x7FF8B14505D0 (21 samples, 0.07%)</title><rect x="4.7030%" y="277" width="0.0684%" height="15" fill="rgb(247,81,37)" fg:x="1444" fg:w="21"/><text x="4.7780%" y="287.50"></text></g><g><title>`0x7FF8B14505E9 (10 samples, 0.03%)</title><rect x="4.7811%" y="277" width="0.0326%" height="15" fill="rgb(209,12,38)" fg:x="1468" fg:w="10"/><text x="4.8561%" y="287.50"></text></g><g><title>`0x7FF8B14505F3 (22 samples, 0.07%)</title><rect x="4.8137%" y="277" width="0.0717%" height="15" fill="rgb(227,1,9)" fg:x="1478" fg:w="22"/><text x="4.8887%" y="287.50"></text></g><g><title>`0x7FF8B14505FC (35 samples, 0.11%)</title><rect x="4.8854%" y="277" width="0.1140%" height="15" fill="rgb(248,47,43)" fg:x="1500" fg:w="35"/><text x="4.9604%" y="287.50"></text></g><g><title>`0x7FF8B1450606 (25 samples, 0.08%)</title><rect x="5.0026%" y="277" width="0.0814%" height="15" fill="rgb(221,10,30)" fg:x="1536" fg:w="25"/><text x="5.0776%" y="287.50"></text></g><g><title>`0x7FF8B1450626 (13 samples, 0.04%)</title><rect x="5.0971%" y="277" width="0.0423%" height="15" fill="rgb(210,229,1)" fg:x="1565" fg:w="13"/><text x="5.1721%" y="287.50"></text></g><g><title>`0x7FF8B1450636 (13 samples, 0.04%)</title><rect x="5.1394%" y="277" width="0.0423%" height="15" fill="rgb(222,148,37)" fg:x="1578" fg:w="13"/><text x="5.2144%" y="287.50"></text></g><g><title>`0x7FF8B1450646 (19 samples, 0.06%)</title><rect x="5.1817%" y="277" width="0.0619%" height="15" fill="rgb(234,67,33)" fg:x="1591" fg:w="19"/><text x="5.2567%" y="287.50"></text></g><g><title>`0x7FF8B1450654 (5 samples, 0.02%)</title><rect x="5.2469%" y="277" width="0.0163%" height="15" fill="rgb(247,98,35)" fg:x="1611" fg:w="5"/><text x="5.3219%" y="287.50"></text></g><g><title>`0x7FF8B1450668 (18 samples, 0.06%)</title><rect x="5.2632%" y="277" width="0.0586%" height="15" fill="rgb(247,138,52)" fg:x="1616" fg:w="18"/><text x="5.3382%" y="287.50"></text></g><g><title>`0x7FF8B1450682 (5 samples, 0.02%)</title><rect x="5.3218%" y="277" width="0.0163%" height="15" fill="rgb(213,79,30)" fg:x="1634" fg:w="5"/><text x="5.3968%" y="287.50"></text></g><g><title>`0x7FF8B1450706 (15 samples, 0.05%)</title><rect x="5.3381%" y="277" width="0.0489%" height="15" fill="rgb(246,177,23)" fg:x="1639" fg:w="15"/><text x="5.4131%" y="287.50"></text></g><g><title>falcon-2.exe`core::iter::range::impl$6::next(core::ops::range::Range (730 samples, 2.38%)</title><rect x="3.0973%" y="325" width="2.3775%" height="15" fill="rgb(230,62,27)" fg:x="951" fg:w="730"/><text x="3.1723%" y="335.50">falcon-2.ex..</text></g><g><title>falcon-2.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (730 samples, 2.38%)</title><rect x="3.0973%" y="309" width="2.3775%" height="15" fill="rgb(216,154,8)" fg:x="951" fg:w="730"/><text x="3.1723%" y="319.50">falcon-2.ex..</text></g><g><title>falcon-2.exe`core::cmp::impls::impl$58::lt (730 samples, 2.38%)</title><rect x="3.0973%" y="293" width="2.3775%" height="15" fill="rgb(244,35,45)" fg:x="951" fg:w="730"/><text x="3.1723%" y="303.50">falcon-2.ex..</text></g><g><title>falcon-2.exe`memcpy (26 samples, 0.08%)</title><rect x="5.3902%" y="277" width="0.0847%" height="15" fill="rgb(251,115,12)" fg:x="1655" fg:w="26"/><text x="5.4652%" y="287.50"></text></g><g><title>`0x7FF937B4FA02 (15 samples, 0.05%)</title><rect x="5.4749%" y="309" width="0.0489%" height="15" fill="rgb(240,54,50)" fg:x="1681" fg:w="15"/><text x="5.5499%" y="319.50"></text></g><g><title>`0x7FF937B2C2ED (15 samples, 0.05%)</title><rect x="5.4749%" y="293" width="0.0489%" height="15" fill="rgb(233,84,52)" fg:x="1681" fg:w="15"/><text x="5.5499%" y="303.50"></text></g><g><title>`0x7FF937B8F5FF (15 samples, 0.05%)</title><rect x="5.4749%" y="277" width="0.0489%" height="15" fill="rgb(207,117,47)" fg:x="1681" fg:w="15"/><text x="5.5499%" y="287.50"></text></g><g><title>`0x7FF937C7C384 (15 samples, 0.05%)</title><rect x="5.4749%" y="261" width="0.0489%" height="15" fill="rgb(249,43,39)" fg:x="1681" fg:w="15"/><text x="5.5499%" y="271.50"></text></g><g><title>falcon-2.exe`alloc::vec::impl$25::drop(alloc::vec::Vec (19 samples, 0.06%)</title><rect x="5.5237%" y="309" width="0.0619%" height="15" fill="rgb(209,38,44)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="319.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$ (19 samples, 0.06%)</title><rect x="5.5237%" y="293" width="0.0619%" height="15" fill="rgb(236,212,23)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="303.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place (19 samples, 0.06%)</title><rect x="5.5237%" y="277" width="0.0619%" height="15" fill="rgb(242,79,21)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="287.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place (19 samples, 0.06%)</title><rect x="5.5237%" y="261" width="0.0619%" height="15" fill="rgb(211,96,35)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="271.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place(alloc::collections::vec_deque::VecDeque (19 samples, 0.06%)</title><rect x="5.5237%" y="245" width="0.0619%" height="15" fill="rgb(253,215,40)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="255.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (19 samples, 0.06%)</title><rect x="5.5237%" y="229" width="0.0619%" height="15" fill="rgb(211,81,21)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="239.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (19 samples, 0.06%)</title><rect x="5.5237%" y="213" width="0.0619%" height="15" fill="rgb(208,190,38)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="223.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (19 samples, 0.06%)</title><rect x="5.5237%" y="197" width="0.0619%" height="15" fill="rgb(235,213,38)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="207.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (19 samples, 0.06%)</title><rect x="5.5237%" y="181" width="0.0619%" height="15" fill="rgb(237,122,38)" fg:x="1696" fg:w="19"/><text x="5.5987%" y="191.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place(alloc::vec::Vec (50 samples, 0.16%)</title><rect x="5.4749%" y="325" width="0.1628%" height="15" fill="rgb(244,218,35)" fg:x="1681" fg:w="50"/><text x="5.5499%" y="335.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (16 samples, 0.05%)</title><rect x="5.5856%" y="309" width="0.0521%" height="15" fill="rgb(240,68,47)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="319.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (16 samples, 0.05%)</title><rect x="5.5856%" y="293" width="0.0521%" height="15" fill="rgb(210,16,53)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="303.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (16 samples, 0.05%)</title><rect x="5.5856%" y="277" width="0.0521%" height="15" fill="rgb(235,124,12)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="287.50"></text></g><g><title>falcon-2.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (16 samples, 0.05%)</title><rect x="5.5856%" y="261" width="0.0521%" height="15" fill="rgb(224,169,11)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="271.50"></text></g><g><title>falcon-2.exe`alloc::alloc::dealloc (16 samples, 0.05%)</title><rect x="5.5856%" y="245" width="0.0521%" height="15" fill="rgb(250,166,2)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="255.50"></text></g><g><title>falcon-2.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (16 samples, 0.05%)</title><rect x="5.5856%" y="229" width="0.0521%" height="15" fill="rgb(242,216,29)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="239.50"></text></g><g><title>falcon-2.exe`std::sys::alloc::windows::impl$0::dealloc (16 samples, 0.05%)</title><rect x="5.5856%" y="213" width="0.0521%" height="15" fill="rgb(230,116,27)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="223.50"></text></g><g><title>`0x7FF937B4FA02 (16 samples, 0.05%)</title><rect x="5.5856%" y="197" width="0.0521%" height="15" fill="rgb(228,99,48)" fg:x="1715" fg:w="16"/><text x="5.6606%" y="207.50"></text></g><g><title>`0x7FF937B2C2ED (15 samples, 0.05%)</title><rect x="5.5888%" y="181" width="0.0489%" height="15" fill="rgb(253,11,6)" fg:x="1716" fg:w="15"/><text x="5.6638%" y="191.50"></text></g><g><title>`0x7FF937B8F5FF (15 samples, 0.05%)</title><rect x="5.5888%" y="165" width="0.0489%" height="15" fill="rgb(247,143,39)" fg:x="1716" fg:w="15"/><text x="5.6638%" y="175.50"></text></g><g><title>`0x7FF937C7C384 (15 samples, 0.05%)</title><rect x="5.5888%" y="149" width="0.0489%" height="15" fill="rgb(236,97,10)" fg:x="1716" fg:w="15"/><text x="5.6638%" y="159.50"></text></g><g><title>falcon-2.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (5 samples, 0.02%)</title><rect x="5.6377%" y="245" width="0.0163%" height="15" fill="rgb(233,208,19)" fg:x="1731" fg:w="5"/><text x="5.7127%" y="255.50"></text></g><g><title>falcon-2.exe`alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="5.6377%" y="229" width="0.0163%" height="15" fill="rgb(216,164,2)" fg:x="1731" fg:w="5"/><text x="5.7127%" y="239.50"></text></g><g><title>falcon-2.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (5 samples, 0.02%)</title><rect x="5.6377%" y="213" width="0.0163%" height="15" fill="rgb(220,129,5)" fg:x="1731" fg:w="5"/><text x="5.7127%" y="223.50"></text></g><g><title>falcon-2.exe`std::sys::alloc::windows::impl$0::dealloc (5 samples, 0.02%)</title><rect x="5.6377%" y="197" width="0.0163%" height="15" fill="rgb(242,17,10)" fg:x="1731" fg:w="5"/><text x="5.7127%" y="207.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::as_slices (26 samples, 0.08%)</title><rect x="7.2629%" y="181" width="0.0847%" height="15" fill="rgb(242,107,0)" fg:x="2230" fg:w="26"/><text x="7.3379%" y="191.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::slice_ranges (25 samples, 0.08%)</title><rect x="7.2662%" y="165" width="0.0814%" height="15" fill="rgb(251,28,31)" fg:x="2231" fg:w="25"/><text x="7.3412%" y="175.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::iter (27 samples, 0.09%)</title><rect x="7.2629%" y="197" width="0.0879%" height="15" fill="rgb(233,223,10)" fg:x="2230" fg:w="27"/><text x="7.3379%" y="207.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (40 samples, 0.13%)</title><rect x="7.4160%" y="149" width="0.1303%" height="15" fill="rgb(215,21,27)" fg:x="2277" fg:w="40"/><text x="7.4910%" y="159.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::layout_array (24 samples, 0.08%)</title><rect x="7.4681%" y="133" width="0.0782%" height="15" fill="rgb(232,23,21)" fg:x="2293" fg:w="24"/><text x="7.5431%" y="143.50"></text></g><g><title>falcon-2.exe`core::alloc::layout::Layout::repeat (24 samples, 0.08%)</title><rect x="7.4681%" y="117" width="0.0782%" height="15" fill="rgb(244,5,23)" fg:x="2293" fg:w="24"/><text x="7.5431%" y="127.50"></text></g><g><title>falcon-2.exe`core::alloc::layout::Layout::repeat_packed (24 samples, 0.08%)</title><rect x="7.4681%" y="101" width="0.0782%" height="15" fill="rgb(226,81,46)" fg:x="2293" fg:w="24"/><text x="7.5431%" y="111.50"></text></g><g><title>falcon-2.exe`core::num::impl$11::checked_mul (24 samples, 0.08%)</title><rect x="7.4681%" y="85" width="0.0782%" height="15" fill="rgb(247,70,30)" fg:x="2293" fg:w="24"/><text x="7.5431%" y="95.50"></text></g><g><title>falcon-2.exe`core::num::impl$11::overflowing_mul (24 samples, 0.08%)</title><rect x="7.4681%" y="69" width="0.0782%" height="15" fill="rgb(212,68,19)" fg:x="2293" fg:w="24"/><text x="7.5431%" y="79.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::len (61 samples, 0.20%)</title><rect x="7.3508%" y="197" width="0.1987%" height="15" fill="rgb(240,187,13)" fg:x="2257" fg:w="61"/><text x="7.4258%" y="207.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVec&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::with_capacity_in (41 samples, 0.13%)</title><rect x="7.4160%" y="181" width="0.1335%" height="15" fill="rgb(223,113,26)" fg:x="2277" fg:w="41"/><text x="7.4910%" y="191.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (41 samples, 0.13%)</title><rect x="7.4160%" y="165" width="0.1335%" height="15" fill="rgb(206,192,2)" fg:x="2277" fg:w="41"/><text x="7.4910%" y="175.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::reserve (14 samples, 0.05%)</title><rect x="7.5495%" y="165" width="0.0456%" height="15" fill="rgb(241,108,4)" fg:x="2318" fg:w="14"/><text x="7.6245%" y="175.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::to_physical_idx (27 samples, 0.09%)</title><rect x="7.5951%" y="165" width="0.0879%" height="15" fill="rgb(247,173,49)" fg:x="2332" fg:w="27"/><text x="7.6701%" y="175.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::wrap_add (27 samples, 0.09%)</title><rect x="7.5951%" y="149" width="0.0879%" height="15" fill="rgb(224,114,35)" fg:x="2332" fg:w="27"/><text x="7.6701%" y="159.50"></text></g><g><title>falcon-2.exe`core::num::impl$11::wrapping_add (27 samples, 0.09%)</title><rect x="7.5951%" y="133" width="0.0879%" height="15" fill="rgb(245,159,27)" fg:x="2332" fg:w="27"/><text x="7.6701%" y="143.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::write_iter(unsigned long long, core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (28 samples, 0.09%)</title><rect x="7.6830%" y="149" width="0.0912%" height="15" fill="rgb(245,172,44)" fg:x="2359" fg:w="28"/><text x="7.7580%" y="159.50"></text></g><g><title>falcon-2.exe`core::iter::traits::iterator::Iterator::for_each(core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter&lt;falcon_2::game::Garbage&gt; &gt; &gt;, alloc::collections::vec_deque::impl$3::write_iter::closure_env$0&lt;falcon_2::game::Garbage,alloc::alloc::Global,core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (28 samples, 0.09%)</title><rect x="7.6830%" y="133" width="0.0912%" height="15" fill="rgb(236,23,11)" fg:x="2359" fg:w="28"/><text x="7.7580%" y="143.50"></text></g><g><title>falcon-2.exe`core::iter::adapters::enumerate::impl$1::fold(core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter&lt;falcon_2::game::Garbage&gt; &gt; &gt;, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,falcon_2::game::Garbage&gt;,alloc::collections::vec_deque::impl$3::write_iter::closure_env$0&lt;falcon_2::game::Garbage,alloc::alloc::Global,core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (28 samples, 0.09%)</title><rect x="7.6830%" y="117" width="0.0912%" height="15" fill="rgb(205,117,38)" fg:x="2359" fg:w="28"/><text x="7.7580%" y="127.50"></text></g><g><title>falcon-2.exe`core::iter::adapters::cloned::impl$1::fold(core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter&lt;falcon_2::game::Garbage&gt; &gt;, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;falcon_2::game::Garbage,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,falcon_2::game::Garbage&gt;,alloc::collections::vec_deque::impl$3::write_iter::closure_env$0&lt;falcon_2::game::Garbage,alloc::alloc::Global,core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (28 samples, 0.09%)</title><rect x="7.6830%" y="101" width="0.0912%" height="15" fill="rgb(237,72,25)" fg:x="2359" fg:w="28"/><text x="7.7580%" y="111.50"></text></g><g><title>falcon-2.exe`core::iter::adapters::map::impl$2::fold(core::iter::adapters::map::Map&lt;alloc::collections::vec_deque::iter::Iter&lt;falcon_2::game::Garbage&gt;,falcon_2::game::Garbage (*)(ref$&lt;falcon_2::game::Garbage&gt;)&gt;, tuple$&lt;&gt;, core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;falcon_2::game::Garbage,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,falcon_2::game::Garbage&gt;,alloc::collections::vec_deque::impl$3::write_iter::closure_env$0&lt;falcon_2::game::Garbage,alloc::alloc::Global,core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (28 samples, 0.09%)</title><rect x="7.6830%" y="85" width="0.0912%" height="15" fill="rgb(244,70,9)" fg:x="2359" fg:w="28"/><text x="7.7580%" y="95.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::iter::impl$4::fold(alloc::collections::vec_deque::iter::Iter&lt;falcon_2::game::Garbage&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;falcon_2::game::Garbage&gt;,falcon_2::game::Garbage,tuple$&lt;&gt;,falcon_2::game::Garbage (*)(ref$&lt;falcon_2::game::Garbage&gt;),core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;falcon_2::game::Garbage,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,falcon_2::game::Garbage&gt;,alloc::collections::vec_deque::impl$3::write_iter::closure_env$0&lt;falcon_2::game::Garbage,alloc::alloc::Global,core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (28 samples, 0.09%)</title><rect x="7.6830%" y="69" width="0.0912%" height="15" fill="rgb(217,125,39)" fg:x="2359" fg:w="28"/><text x="7.7580%" y="79.50"></text></g><g><title>falcon-2.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;falcon_2::game::Garbage&gt;, tuple$&lt;&gt;, core::iter::adapters::map::map_fold::closure_env$0&lt;ref$&lt;falcon_2::game::Garbage&gt;,falcon_2::game::Garbage,tuple$&lt;&gt;,falcon_2::game::Garbage (*)(ref$&lt;falcon_2::game::Garbage&gt;),core::iter::adapters::enumerate::impl$1::fold::enumerate::closure_env$0&lt;falcon_2::game::Garbage,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;usize,falcon_2::game::Garbage&gt;,alloc::collections::vec_deque::impl$3::write_iter::closure_env$0&lt;falcon_2::game::Garbage,alloc::alloc::Global,core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (28 samples, 0.09%)</title><rect x="7.6830%" y="53" width="0.0912%" height="15" fill="rgb(235,36,10)" fg:x="2359" fg:w="28"/><text x="7.7580%" y="63.50"></text></g><g><title>falcon-2.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;falcon_2::game::Garbage&gt;*, core::ptr::non_null::NonNull (26 samples, 0.08%)</title><rect x="7.6896%" y="37" width="0.0847%" height="15" fill="rgb(251,123,47)" fg:x="2361" fg:w="26"/><text x="7.7646%" y="47.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::write_iter_wrapping(unsigned long long, core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (29 samples, 0.09%)</title><rect x="7.6830%" y="165" width="0.0945%" height="15" fill="rgb(221,13,13)" fg:x="2359" fg:w="29"/><text x="7.7580%" y="175.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::impl$0::clone(alloc::collections::vec_deque::VecDeque (549 samples, 1.79%)</title><rect x="6.0611%" y="213" width="1.7880%" height="15" fill="rgb(238,131,9)" fg:x="1861" fg:w="549"/><text x="6.1361%" y="223.50">falcon-2..</text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::impl$18::extend(alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;*, core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (92 samples, 0.30%)</title><rect x="7.5495%" y="197" width="0.2996%" height="15" fill="rgb(211,50,8)" fg:x="2318" fg:w="92"/><text x="7.6245%" y="207.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::spec_extend::impl$1::spec_extend(alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;*, core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (92 samples, 0.30%)</title><rect x="7.5495%" y="181" width="0.2996%" height="15" fill="rgb(245,182,24)" fg:x="2318" fg:w="92"/><text x="7.6245%" y="191.50"></text></g><g><title>falcon-2.exe`core::iter::adapters::cloned::impl$1::size_hint(core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (22 samples, 0.07%)</title><rect x="7.7775%" y="165" width="0.0717%" height="15" fill="rgb(242,14,37)" fg:x="2388" fg:w="22"/><text x="7.8525%" y="175.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::iter::impl$4::size_hint(alloc::collections::vec_deque::iter::Iter (22 samples, 0.07%)</title><rect x="7.7775%" y="149" width="0.0717%" height="15" fill="rgb(246,228,12)" fg:x="2388" fg:w="22"/><text x="7.8525%" y="159.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::iter::impl$6::len(alloc::collections::vec_deque::iter::Iter (22 samples, 0.07%)</title><rect x="7.7775%" y="133" width="0.0717%" height="15" fill="rgb(213,55,15)" fg:x="2388" fg:w="22"/><text x="7.8525%" y="143.50"></text></g><g><title>falcon-2.exe`core::slice::iter::impl$181::len(core::slice::iter::Iter (22 samples, 0.07%)</title><rect x="7.7775%" y="117" width="0.0717%" height="15" fill="rgb(209,9,3)" fg:x="2388" fg:w="22"/><text x="7.8525%" y="127.50"></text></g><g><title>falcon-2.exe`core::ptr::non_null::NonNull&lt;falcon_2::game::Garbage&gt;::sub_ptr(core::ptr::non_null::NonNull&lt;falcon_2::game::Garbage&gt;, core::ptr::non_null::NonNull (22 samples, 0.07%)</title><rect x="7.7775%" y="101" width="0.0717%" height="15" fill="rgb(230,59,30)" fg:x="2388" fg:w="22"/><text x="7.8525%" y="111.50"></text></g><g><title>falcon-2.exe`core::ptr::mut_ptr::impl$0::sub_ptr (22 samples, 0.07%)</title><rect x="7.7775%" y="85" width="0.0717%" height="15" fill="rgb(209,121,21)" fg:x="2388" fg:w="22"/><text x="7.8525%" y="95.50"></text></g><g><title>falcon-2.exe`core::ptr::const_ptr::impl$0::sub_ptr (22 samples, 0.07%)</title><rect x="7.7775%" y="69" width="0.0717%" height="15" fill="rgb(220,109,13)" fg:x="2388" fg:w="22"/><text x="7.8525%" y="79.50"></text></g><g><title>`0x7FF8B1450571 (20 samples, 0.07%)</title><rect x="7.9468%" y="197" width="0.0651%" height="15" fill="rgb(232,18,1)" fg:x="2440" fg:w="20"/><text x="8.0218%" y="207.50"></text></g><g><title>`0x7FF8B14505A2 (21 samples, 0.07%)</title><rect x="8.0152%" y="197" width="0.0684%" height="15" fill="rgb(215,41,42)" fg:x="2461" fg:w="21"/><text x="8.0902%" y="207.50"></text></g><g><title>`0x7FF8B14505D0 (24 samples, 0.08%)</title><rect x="8.0902%" y="197" width="0.0782%" height="15" fill="rgb(224,123,36)" fg:x="2484" fg:w="24"/><text x="8.1652%" y="207.50"></text></g><g><title>`0x7FF8B14505FC (10 samples, 0.03%)</title><rect x="8.1716%" y="197" width="0.0326%" height="15" fill="rgb(240,125,3)" fg:x="2509" fg:w="10"/><text x="8.2466%" y="207.50"></text></g><g><title>`0x7FF8B1450636 (25 samples, 0.08%)</title><rect x="8.2237%" y="197" width="0.0814%" height="15" fill="rgb(205,98,50)" fg:x="2525" fg:w="25"/><text x="8.2987%" y="207.50"></text></g><g><title>`0x7FF8B1450670 (19 samples, 0.06%)</title><rect x="8.3084%" y="197" width="0.0619%" height="15" fill="rgb(205,185,37)" fg:x="2551" fg:w="19"/><text x="8.3834%" y="207.50"></text></g><g><title>`0x7FF8B14506EA (23 samples, 0.07%)</title><rect x="8.3833%" y="197" width="0.0749%" height="15" fill="rgb(238,207,15)" fg:x="2574" fg:w="23"/><text x="8.4583%" y="207.50"></text></g><g><title>`0x7FF8B1453010 (7 samples, 0.02%)</title><rect x="8.4647%" y="197" width="0.0228%" height="15" fill="rgb(213,199,42)" fg:x="2599" fg:w="7"/><text x="8.5397%" y="207.50"></text></g><g><title>falcon-2.exe`falcon_2::game::data::impl$9::clone (238 samples, 0.78%)</title><rect x="7.8491%" y="213" width="0.7751%" height="15" fill="rgb(235,201,11)" fg:x="2410" fg:w="238"/><text x="7.9241%" y="223.50">fa..</text></g><g><title>falcon-2.exe`memcpy (42 samples, 0.14%)</title><rect x="8.4875%" y="197" width="0.1368%" height="15" fill="rgb(207,46,11)" fg:x="2606" fg:w="42"/><text x="8.5625%" y="207.50"></text></g><g><title>falcon-2.exe`core::ptr::drop_in_place (918 samples, 2.99%)</title><rect x="5.6377%" y="325" width="2.9898%" height="15" fill="rgb(241,35,35)" fg:x="1731" fg:w="918"/><text x="5.7127%" y="335.50">falcon-2.exe`c..</text></g><g><title>falcon-2.exe`core::ptr::drop_in_place(alloc::collections::vec_deque::VecDeque (918 samples, 2.99%)</title><rect x="5.6377%" y="309" width="2.9898%" height="15" fill="rgb(243,32,47)" fg:x="1731" fg:w="918"/><text x="5.7127%" y="319.50">falcon-2.exe`c..</text></g><g><title>falcon-2.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (918 samples, 2.99%)</title><rect x="5.6377%" y="293" width="2.9898%" height="15" fill="rgb(247,202,23)" fg:x="1731" fg:w="918"/><text x="5.7127%" y="303.50">falcon-2.exe`c..</text></g><g><title>falcon-2.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (918 samples, 2.99%)</title><rect x="5.6377%" y="277" width="2.9898%" height="15" fill="rgb(219,102,11)" fg:x="1731" fg:w="918"/><text x="5.7127%" y="287.50">falcon-2.exe`a..</text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (918 samples, 2.99%)</title><rect x="5.6377%" y="261" width="2.9898%" height="15" fill="rgb(243,110,44)" fg:x="1731" fg:w="918"/><text x="5.7127%" y="271.50">falcon-2.exe`a..</text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (913 samples, 2.97%)</title><rect x="5.6540%" y="245" width="2.9736%" height="15" fill="rgb(222,74,54)" fg:x="1736" fg:w="913"/><text x="5.7290%" y="255.50">falcon-2.exe`a..</text></g><g><title>falcon-2.exe`falcon_2::game::impl$15::clone (910 samples, 2.96%)</title><rect x="5.6638%" y="229" width="2.9638%" height="15" fill="rgb(216,99,12)" fg:x="1739" fg:w="910"/><text x="5.7388%" y="239.50">falcon-2.exe`f..</text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::buffer_range(core::ops::range::Range (8 samples, 0.03%)</title><rect x="10.6598%" y="277" width="0.0261%" height="15" fill="rgb(226,22,26)" fg:x="3273" fg:w="8"/><text x="10.7348%" y="287.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::ptr (8 samples, 0.03%)</title><rect x="10.6598%" y="261" width="0.0261%" height="15" fill="rgb(217,163,10)" fg:x="3273" fg:w="8"/><text x="10.7348%" y="271.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVec&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::ptr (4 samples, 0.01%)</title><rect x="10.6729%" y="245" width="0.0130%" height="15" fill="rgb(213,25,53)" fg:x="3277" fg:w="4"/><text x="10.7479%" y="255.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (4 samples, 0.01%)</title><rect x="10.6729%" y="229" width="0.0130%" height="15" fill="rgb(252,105,26)" fg:x="3277" fg:w="4"/><text x="10.7479%" y="239.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (4 samples, 0.01%)</title><rect x="10.6729%" y="213" width="0.0130%" height="15" fill="rgb(220,39,43)" fg:x="3277" fg:w="4"/><text x="10.7479%" y="223.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::as_mut_slices (32 samples, 0.10%)</title><rect x="10.6273%" y="293" width="0.1042%" height="15" fill="rgb(229,68,48)" fg:x="3263" fg:w="32"/><text x="10.7023%" y="303.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::slice_ranges (14 samples, 0.05%)</title><rect x="10.6859%" y="277" width="0.0456%" height="15" fill="rgb(252,8,32)" fg:x="3281" fg:w="14"/><text x="10.7609%" y="287.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::iter_mut (56 samples, 0.18%)</title><rect x="10.6273%" y="309" width="0.1824%" height="15" fill="rgb(223,20,43)" fg:x="3263" fg:w="56"/><text x="10.7023%" y="319.50"></text></g><g><title>falcon-2.exe`core::slice::impl$0::iter_mut(ref_mut$&lt;slice2$ (24 samples, 0.08%)</title><rect x="10.7315%" y="293" width="0.0782%" height="15" fill="rgb(229,81,49)" fg:x="3295" fg:w="24"/><text x="10.8065%" y="303.50"></text></g><g><title>falcon-2.exe`core::slice::iter::IterMut&lt;falcon_2::game::Garbage&gt;::new(ref_mut$&lt;slice2$ (24 samples, 0.08%)</title><rect x="10.7315%" y="277" width="0.0782%" height="15" fill="rgb(236,28,36)" fg:x="3295" fg:w="24"/><text x="10.8065%" y="287.50"></text></g><g><title>falcon-2.exe`core::ptr::mut_ptr::impl$0::add (24 samples, 0.08%)</title><rect x="10.7315%" y="261" width="0.0782%" height="15" fill="rgb(249,185,26)" fg:x="3295" fg:w="24"/><text x="10.8065%" y="271.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::iter_mut::impl$3::next(alloc::collections::vec_deque::iter_mut::IterMut (23 samples, 0.07%)</title><rect x="10.8097%" y="309" width="0.0749%" height="15" fill="rgb(249,174,33)" fg:x="3319" fg:w="23"/><text x="10.8847%" y="319.50"></text></g><g><title>falcon-2.exe`core::slice::iter::impl$190::next(core::slice::iter::IterMut (23 samples, 0.07%)</title><rect x="10.8097%" y="293" width="0.0749%" height="15" fill="rgb(233,201,37)" fg:x="3319" fg:w="23"/><text x="10.8847%" y="303.50"></text></g><g><title>falcon-2.exe`core::iter::adapters::copied::impl$1::fold(core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter (83 samples, 0.27%)</title><rect x="11.5262%" y="293" width="0.2703%" height="15" fill="rgb(221,78,26)" fg:x="3539" fg:w="83"/><text x="11.6012%" y="303.50"></text></g><g><title>falcon-2.exe`core::slice::iter::impl$182::fold(core::slice::iter::Iter&lt;u64&gt;, unsigned long long, core::iter::adapters::copied::copy_fold::closure_env$0 (83 samples, 0.27%)</title><rect x="11.5262%" y="277" width="0.2703%" height="15" fill="rgb(250,127,30)" fg:x="3539" fg:w="83"/><text x="11.6012%" y="287.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Board::clear (291 samples, 0.95%)</title><rect x="10.8846%" y="309" width="0.9478%" height="15" fill="rgb(230,49,44)" fg:x="3342" fg:w="291"/><text x="10.9596%" y="319.50">fal..</text></g><g><title>falcon-2.exe`falcon_2::game::Board::clear_column (11 samples, 0.04%)</title><rect x="11.7965%" y="293" width="0.0358%" height="15" fill="rgb(229,67,23)" fg:x="3622" fg:w="11"/><text x="11.8715%" y="303.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Board::set (173 samples, 0.56%)</title><rect x="11.8323%" y="309" width="0.5634%" height="15" fill="rgb(249,83,47)" fg:x="3633" fg:w="173"/><text x="11.9073%" y="319.50">f..</text></g><g><title>falcon-2.exe`falcon_2::game::Game::next_piece (77 samples, 0.25%)</title><rect x="12.4023%" y="309" width="0.2508%" height="15" fill="rgb(215,43,3)" fg:x="3808" fg:w="77"/><text x="12.4773%" y="319.50"></text></g><g><title>falcon-2.exe`falcon_2::game::data::Mino::data (4 samples, 0.01%)</title><rect x="12.6400%" y="293" width="0.0130%" height="15" fill="rgb(238,154,13)" fg:x="3881" fg:w="4"/><text x="12.7150%" y="303.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Game::soft_drop (71 samples, 0.23%)</title><rect x="12.6531%" y="309" width="0.2312%" height="15" fill="rgb(219,56,2)" fg:x="3885" fg:w="71"/><text x="12.7281%" y="319.50"></text></g><g><title>falcon-2.exe`falcon_2::game::CollisionMap::test (30 samples, 0.10%)</title><rect x="12.7866%" y="293" width="0.0977%" height="15" fill="rgb(233,0,4)" fg:x="3926" fg:w="30"/><text x="12.8616%" y="303.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Game::hard_drop (1,311 samples, 4.27%)</title><rect x="8.6308%" y="325" width="4.2698%" height="15" fill="rgb(235,30,7)" fg:x="2650" fg:w="1311"/><text x="8.7058%" y="335.50">falcon-2.exe`falcon_2:..</text></g><g><title>falcon-2.exe`falcon_2::game::garbage::damage_calc (5 samples, 0.02%)</title><rect x="12.8843%" y="309" width="0.0163%" height="15" fill="rgb(250,79,13)" fg:x="3956" fg:w="5"/><text x="12.9593%" y="319.50"></text></g><g><title>`0x7FF8B14505A2 (8 samples, 0.03%)</title><rect x="12.9560%" y="293" width="0.0261%" height="15" fill="rgb(211,146,34)" fg:x="3978" fg:w="8"/><text x="13.0310%" y="303.50"></text></g><g><title>falcon-2.exe`core::iter::range::impl$6::next(core::ops::range::Range (14 samples, 0.05%)</title><rect x="13.8940%" y="277" width="0.0456%" height="15" fill="rgb(228,22,38)" fg:x="4266" fg:w="14"/><text x="13.9690%" y="287.50"></text></g><g><title>falcon-2.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (14 samples, 0.05%)</title><rect x="13.8940%" y="261" width="0.0456%" height="15" fill="rgb(235,168,5)" fg:x="4266" fg:w="14"/><text x="13.9690%" y="271.50"></text></g><g><title>falcon-2.exe`core::ops::bit::impl$329::shl (37 samples, 0.12%)</title><rect x="13.9396%" y="277" width="0.1205%" height="15" fill="rgb(221,155,16)" fg:x="4280" fg:w="37"/><text x="14.0146%" y="287.50"></text></g><g><title>falcon-2.exe`core::ops::bit::impl$327::shl (37 samples, 0.12%)</title><rect x="13.9396%" y="261" width="0.1205%" height="15" fill="rgb(215,215,53)" fg:x="4280" fg:w="37"/><text x="14.0146%" y="271.50"></text></g><g><title>falcon-2.exe`core::slice::impl$0::get(ref$&lt;slice2$ (34 samples, 0.11%)</title><rect x="14.0601%" y="277" width="0.1107%" height="15" fill="rgb(223,4,10)" fg:x="4317" fg:w="34"/><text x="14.1351%" y="287.50"></text></g><g><title>falcon-2.exe`core::slice::index::impl$2::get(unsigned long long, ref$&lt;slice2$ (9 samples, 0.03%)</title><rect x="14.1415%" y="261" width="0.0293%" height="15" fill="rgb(234,103,6)" fg:x="4342" fg:w="9"/><text x="14.2165%" y="271.50"></text></g><g><title>falcon-2.exe`core::slice::index::get_noubcheck(ptr_const$&lt;slice2$ (9 samples, 0.03%)</title><rect x="14.1415%" y="245" width="0.0293%" height="15" fill="rgb(227,97,0)" fg:x="4342" fg:w="9"/><text x="14.2165%" y="255.50"></text></g><g><title>falcon-2.exe`falcon_2::game::CollisionMap::new (360 samples, 1.17%)</title><rect x="13.0113%" y="293" width="1.1725%" height="15" fill="rgb(234,150,53)" fg:x="3995" fg:w="360"/><text x="13.0863%" y="303.50">falc..</text></g><g><title>falcon-2.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (4 samples, 0.01%)</title><rect x="14.1708%" y="277" width="0.0130%" height="15" fill="rgb(228,201,54)" fg:x="4351" fg:w="4"/><text x="14.2458%" y="287.50"></text></g><g><title>falcon-2.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (4 samples, 0.01%)</title><rect x="14.1708%" y="261" width="0.0130%" height="15" fill="rgb(222,22,37)" fg:x="4351" fg:w="4"/><text x="14.2458%" y="271.50"></text></g><g><title>falcon-2.exe`core::slice::iter::Iter&lt;tuple$&lt;u8,u8&gt; &gt;::post_inc_start (4 samples, 0.01%)</title><rect x="14.1708%" y="245" width="0.0130%" height="15" fill="rgb(237,53,32)" fg:x="4351" fg:w="4"/><text x="14.2458%" y="255.50"></text></g><g><title>falcon-2.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;u8,u8&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (4 samples, 0.01%)</title><rect x="14.1708%" y="229" width="0.0130%" height="15" fill="rgb(233,25,53)" fg:x="4351" fg:w="4"/><text x="14.2458%" y="239.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Board::collision_map (394 samples, 1.28%)</title><rect x="12.9071%" y="309" width="1.2832%" height="15" fill="rgb(210,40,34)" fg:x="3963" fg:w="394"/><text x="12.9821%" y="319.50">falco..</text></g><g><title>falcon-2.exe`falcon_2::game::Board::clear (9 samples, 0.03%)</title><rect x="14.2457%" y="293" width="0.0293%" height="15" fill="rgb(241,220,44)" fg:x="4374" fg:w="9"/><text x="14.3207%" y="303.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Board::set (4 samples, 0.01%)</title><rect x="14.2750%" y="293" width="0.0130%" height="15" fill="rgb(235,28,35)" fg:x="4383" fg:w="4"/><text x="14.3500%" y="303.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Game::regen_collision_map (431 samples, 1.40%)</title><rect x="12.9006%" y="325" width="1.4037%" height="15" fill="rgb(210,56,17)" fg:x="3961" fg:w="431"/><text x="12.9756%" y="335.50">falco..</text></g><g><title>falcon-2.exe`falcon_2::game::Game::hard_drop (35 samples, 0.11%)</title><rect x="14.1903%" y="309" width="0.1140%" height="15" fill="rgb(224,130,29)" fg:x="4357" fg:w="35"/><text x="14.2653%" y="319.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::iter (4 samples, 0.01%)</title><rect x="14.6040%" y="293" width="0.0130%" height="15" fill="rgb(235,212,8)" fg:x="4484" fg:w="4"/><text x="14.6790%" y="303.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::as_slices (4 samples, 0.01%)</title><rect x="14.6040%" y="277" width="0.0130%" height="15" fill="rgb(223,33,50)" fg:x="4484" fg:w="4"/><text x="14.6790%" y="287.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::slice_ranges (4 samples, 0.01%)</title><rect x="14.6040%" y="261" width="0.0130%" height="15" fill="rgb(219,149,13)" fg:x="4484" fg:w="4"/><text x="14.6790%" y="271.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (20 samples, 0.07%)</title><rect x="14.6235%" y="245" width="0.0651%" height="15" fill="rgb(250,156,29)" fg:x="4490" fg:w="20"/><text x="14.6985%" y="255.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::layout_array (4 samples, 0.01%)</title><rect x="14.6756%" y="229" width="0.0130%" height="15" fill="rgb(216,193,19)" fg:x="4506" fg:w="4"/><text x="14.7506%" y="239.50"></text></g><g><title>falcon-2.exe`core::alloc::layout::Layout::repeat (4 samples, 0.01%)</title><rect x="14.6756%" y="213" width="0.0130%" height="15" fill="rgb(216,135,14)" fg:x="4506" fg:w="4"/><text x="14.7506%" y="223.50"></text></g><g><title>falcon-2.exe`core::alloc::layout::Layout::repeat_packed (4 samples, 0.01%)</title><rect x="14.6756%" y="197" width="0.0130%" height="15" fill="rgb(241,47,5)" fg:x="4506" fg:w="4"/><text x="14.7506%" y="207.50"></text></g><g><title>falcon-2.exe`core::num::impl$11::checked_mul (4 samples, 0.01%)</title><rect x="14.6756%" y="181" width="0.0130%" height="15" fill="rgb(233,42,35)" fg:x="4506" fg:w="4"/><text x="14.7506%" y="191.50"></text></g><g><title>falcon-2.exe`core::num::impl$11::overflowing_mul (4 samples, 0.01%)</title><rect x="14.6756%" y="165" width="0.0130%" height="15" fill="rgb(231,13,6)" fg:x="4506" fg:w="4"/><text x="14.7506%" y="175.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::len (23 samples, 0.07%)</title><rect x="14.6170%" y="293" width="0.0749%" height="15" fill="rgb(207,181,40)" fg:x="4488" fg:w="23"/><text x="14.6920%" y="303.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVec&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;::with_capacity_in (21 samples, 0.07%)</title><rect x="14.6235%" y="277" width="0.0684%" height="15" fill="rgb(254,173,49)" fg:x="4490" fg:w="21"/><text x="14.6985%" y="287.50"></text></g><g><title>falcon-2.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (21 samples, 0.07%)</title><rect x="14.6235%" y="261" width="0.0684%" height="15" fill="rgb(221,1,38)" fg:x="4490" fg:w="21"/><text x="14.6985%" y="271.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::impl$0::clone(alloc::collections::vec_deque::VecDeque (113 samples, 0.37%)</title><rect x="14.3662%" y="309" width="0.3680%" height="15" fill="rgb(206,124,46)" fg:x="4411" fg:w="113"/><text x="14.4412%" y="319.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::impl$18::extend(alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;*, core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (13 samples, 0.04%)</title><rect x="14.6919%" y="293" width="0.0423%" height="15" fill="rgb(249,21,11)" fg:x="4511" fg:w="13"/><text x="14.7669%" y="303.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::spec_extend::impl$1::spec_extend(alloc::collections::vec_deque::VecDeque&lt;falcon_2::game::Garbage,alloc::alloc::Global&gt;*, core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (13 samples, 0.04%)</title><rect x="14.6919%" y="277" width="0.0423%" height="15" fill="rgb(222,201,40)" fg:x="4511" fg:w="13"/><text x="14.7669%" y="287.50"></text></g><g><title>falcon-2.exe`core::iter::adapters::cloned::impl$1::size_hint(core::iter::adapters::cloned::Cloned&lt;alloc::collections::vec_deque::iter::Iter (4 samples, 0.01%)</title><rect x="14.7212%" y="261" width="0.0130%" height="15" fill="rgb(235,61,29)" fg:x="4520" fg:w="4"/><text x="14.7962%" y="271.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::iter::impl$4::size_hint(alloc::collections::vec_deque::iter::Iter (4 samples, 0.01%)</title><rect x="14.7212%" y="245" width="0.0130%" height="15" fill="rgb(219,207,3)" fg:x="4520" fg:w="4"/><text x="14.7962%" y="255.50"></text></g><g><title>falcon-2.exe`alloc::collections::vec_deque::iter::impl$6::len(alloc::collections::vec_deque::iter::Iter (4 samples, 0.01%)</title><rect x="14.7212%" y="229" width="0.0130%" height="15" fill="rgb(222,56,46)" fg:x="4520" fg:w="4"/><text x="14.7962%" y="239.50"></text></g><g><title>falcon-2.exe`core::slice::iter::impl$181::len(core::slice::iter::Iter (4 samples, 0.01%)</title><rect x="14.7212%" y="213" width="0.0130%" height="15" fill="rgb(239,76,54)" fg:x="4520" fg:w="4"/><text x="14.7962%" y="223.50"></text></g><g><title>falcon-2.exe`core::ptr::non_null::NonNull&lt;falcon_2::game::Garbage&gt;::sub_ptr(core::ptr::non_null::NonNull&lt;falcon_2::game::Garbage&gt;, core::ptr::non_null::NonNull (4 samples, 0.01%)</title><rect x="14.7212%" y="197" width="0.0130%" height="15" fill="rgb(231,124,27)" fg:x="4520" fg:w="4"/><text x="14.7962%" y="207.50"></text></g><g><title>falcon-2.exe`core::ptr::mut_ptr::impl$0::sub_ptr (4 samples, 0.01%)</title><rect x="14.7212%" y="181" width="0.0130%" height="15" fill="rgb(249,195,6)" fg:x="4520" fg:w="4"/><text x="14.7962%" y="191.50"></text></g><g><title>falcon-2.exe`core::ptr::const_ptr::impl$0::sub_ptr (4 samples, 0.01%)</title><rect x="14.7212%" y="165" width="0.0130%" height="15" fill="rgb(237,174,47)" fg:x="4520" fg:w="4"/><text x="14.7962%" y="175.50"></text></g><g><title>`0x7FF8B145059B (4 samples, 0.01%)</title><rect x="14.7440%" y="293" width="0.0130%" height="15" fill="rgb(206,201,31)" fg:x="4527" fg:w="4"/><text x="14.8190%" y="303.50"></text></g><g><title>`0x7FF8B14505A2 (6 samples, 0.02%)</title><rect x="14.7570%" y="293" width="0.0195%" height="15" fill="rgb(231,57,52)" fg:x="4531" fg:w="6"/><text x="14.8320%" y="303.50"></text></g><g><title>`0x7FF8B14505F3 (4 samples, 0.01%)</title><rect x="14.8124%" y="293" width="0.0130%" height="15" fill="rgb(248,177,22)" fg:x="4548" fg:w="4"/><text x="14.8874%" y="303.50"></text></g><g><title>`0x7FF8B1450616 (9 samples, 0.03%)</title><rect x="14.8482%" y="293" width="0.0293%" height="15" fill="rgb(215,211,37)" fg:x="4559" fg:w="9"/><text x="14.9232%" y="303.50"></text></g><g><title>`0x7FF8B1450626 (4 samples, 0.01%)</title><rect x="14.8808%" y="293" width="0.0130%" height="15" fill="rgb(241,128,51)" fg:x="4569" fg:w="4"/><text x="14.9558%" y="303.50"></text></g><g><title>`0x7FF8B1450636 (4 samples, 0.01%)</title><rect x="14.8938%" y="293" width="0.0130%" height="15" fill="rgb(227,165,31)" fg:x="4573" fg:w="4"/><text x="14.9688%" y="303.50"></text></g><g><title>`0x7FF8B1450670 (4 samples, 0.01%)</title><rect x="14.9069%" y="293" width="0.0130%" height="15" fill="rgb(228,167,24)" fg:x="4577" fg:w="4"/><text x="14.9819%" y="303.50"></text></g><g><title>`0x7FF8B14506EA (4 samples, 0.01%)</title><rect x="14.9199%" y="293" width="0.0130%" height="15" fill="rgb(228,143,12)" fg:x="4581" fg:w="4"/><text x="14.9949%" y="303.50"></text></g><g><title>falcon-2.exe`falcon_2::game::data::impl$9::clone (66 samples, 0.21%)</title><rect x="14.7342%" y="309" width="0.2150%" height="15" fill="rgb(249,149,8)" fg:x="4524" fg:w="66"/><text x="14.8092%" y="319.50"></text></g><g><title>falcon-2.exe`falcon_2::game::impl$15::clone (199 samples, 0.65%)</title><rect x="14.3043%" y="325" width="0.6481%" height="15" fill="rgb(243,35,44)" fg:x="4392" fg:w="199"/><text x="14.3793%" y="335.50">f..</text></g><g><title>falcon-2.exe`core::f32::impl$0::max (6 samples, 0.02%)</title><rect x="15.8383%" y="309" width="0.0195%" height="15" fill="rgb(246,89,9)" fg:x="4863" fg:w="6"/><text x="15.9133%" y="319.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Board::center_height (95 samples, 0.31%)</title><rect x="15.8579%" y="309" width="0.3094%" height="15" fill="rgb(233,213,13)" fg:x="4869" fg:w="95"/><text x="15.9329%" y="319.50"></text></g><g><title>falcon-2.exe`falcon_2::game::Board::max_height (800 samples, 2.61%)</title><rect x="16.1673%" y="309" width="2.6055%" height="15" fill="rgb(233,141,41)" fg:x="4964" fg:w="800"/><text x="16.2423%" y="319.50">falcon-2.exe..</text></g><g><title>falcon-2.exe`core::num::impl$9::leading_zeros (326 samples, 1.06%)</title><rect x="17.7110%" y="293" width="1.0618%" height="15" fill="rgb(239,167,4)" fg:x="5438" fg:w="326"/><text x="17.7860%" y="303.50">fal..</text></g><g><title>`0x7FF934E59590 (5 samples, 0.02%)</title><rect x="18.7826%" y="293" width="0.0163%" height="15" fill="rgb(209,217,16)" fg:x="5767" fg:w="5"/><text x="18.8576%" y="303.50"></text></g><g><title>`0x7FF934E59597 (8 samples, 0.03%)</title><rect x="18.7989%" y="293" width="0.0261%" height="15" fill="rgb(219,88,35)" fg:x="5772" fg:w="8"/><text x="18.8739%" y="303.50"></text></g><g><title>`0x7FF934E595B0 (14 samples, 0.05%)</title><rect x="18.8282%" y="293" width="0.0456%" height="15" fill="rgb(220,193,23)" fg:x="5781" fg:w="14"/><text x="18.9032%" y="303.50"></text></g><g><title>`0x7FF934E595D4 (47 samples, 0.15%)</title><rect x="18.8933%" y="293" width="0.1531%" height="15" fill="rgb(230,90,52)" fg:x="5801" fg:w="47"/><text x="18.9683%" y="303.50"></text></g><g><title>`0x7FF934E595DC (15 samples, 0.05%)</title><rect x="19.0529%" y="293" width="0.0489%" height="15" fill="rgb(252,106,19)" fg:x="5850" fg:w="15"/><text x="19.1279%" y="303.50"></text></g><g><title>`0x7FF934E595FC (15 samples, 0.05%)</title><rect x="19.1017%" y="293" width="0.0489%" height="15" fill="rgb(206,74,20)" fg:x="5865" fg:w="15"/><text x="19.1767%" y="303.50"></text></g><g><title>`0x7FF934E59606 (5 samples, 0.02%)</title><rect x="19.1506%" y="293" width="0.0163%" height="15" fill="rgb(230,138,44)" fg:x="5880" fg:w="5"/><text x="19.2256%" y="303.50"></text></g><g><title>`0x7FF934E5961B (33 samples, 0.11%)</title><rect x="19.1864%" y="293" width="0.1075%" height="15" fill="rgb(235,182,43)" fg:x="5891" fg:w="33"/><text x="19.2614%" y="303.50"></text></g><g><title>`0x7FF934E59626 (32 samples, 0.10%)</title><rect x="19.2972%" y="293" width="0.1042%" height="15" fill="rgb(242,16,51)" fg:x="5925" fg:w="32"/><text x="19.3722%" y="303.50"></text></g><g><title>`0x7FF934E5962C (51 samples, 0.17%)</title><rect x="19.4014%" y="293" width="0.1661%" height="15" fill="rgb(248,9,4)" fg:x="5957" fg:w="51"/><text x="19.4764%" y="303.50"></text></g><g><title>`0x7FF934E5963D (94 samples, 0.31%)</title><rect x="19.5740%" y="293" width="0.3061%" height="15" fill="rgb(210,31,22)" fg:x="6010" fg:w="94"/><text x="19.6490%" y="303.50"></text></g><g><title>`0x7FF934E59641 (4 samples, 0.01%)</title><rect x="19.8801%" y="293" width="0.0130%" height="15" fill="rgb(239,54,39)" fg:x="6104" fg:w="4"/><text x="19.9551%" y="303.50"></text></g><g><title>`0x7FF934E5965C (68 samples, 0.22%)</title><rect x="19.9095%" y="293" width="0.2215%" height="15" fill="rgb(230,99,41)" fg:x="6113" fg:w="68"/><text x="19.9845%" y="303.50"></text></g><g><title>`0x7FF934E59661 (91 samples, 0.30%)</title><rect x="20.1309%" y="293" width="0.2964%" height="15" fill="rgb(253,106,12)" fg:x="6181" fg:w="91"/><text x="20.2059%" y="303.50"></text></g><g><title>`0x7FF934E5966F (5 samples, 0.02%)</title><rect x="20.4273%" y="293" width="0.0163%" height="15" fill="rgb(213,46,41)" fg:x="6272" fg:w="5"/><text x="20.5023%" y="303.50"></text></g><g><title>`0x7FF934E59675 (64 samples, 0.21%)</title><rect x="20.4436%" y="293" width="0.2084%" height="15" fill="rgb(215,133,35)" fg:x="6277" fg:w="64"/><text x="20.5186%" y="303.50"></text></g><g><title>`0x7FF934E59679 (41 samples, 0.13%)</title><rect x="20.6520%" y="293" width="0.1335%" height="15" fill="rgb(213,28,5)" fg:x="6341" fg:w="41"/><text x="20.7270%" y="303.50"></text></g><g><title>falcon-2.exe`falcon_2::search::eval::eval (1,809 samples, 5.89%)</title><rect x="14.9524%" y="325" width="5.8917%" height="15" fill="rgb(215,77,49)" fg:x="4591" fg:w="1809"/><text x="15.0274%" y="335.50">falcon-2.exe`falcon_2::search::..</text></g><g><title>falcon-2.exe`std::f32::impl$0::ln (636 samples, 2.07%)</title><rect x="18.7728%" y="309" width="2.0714%" height="15" fill="rgb(248,100,22)" fg:x="5764" fg:w="636"/><text x="18.8478%" y="319.50">falcon-2...</text></g><g><title>falcon-2.exe`logf (18 samples, 0.06%)</title><rect x="20.7856%" y="293" width="0.0586%" height="15" fill="rgb(208,67,9)" fg:x="6382" fg:w="18"/><text x="20.8606%" y="303.50"></text></g><g><title>`0x7FF8B1451BC0 (14 samples, 0.05%)</title><rect x="52.1756%" y="309" width="0.0456%" height="15" fill="rgb(219,133,21)" fg:x="16020" fg:w="14"/><text x="52.2506%" y="319.50"></text></g><g><title>`0x7FF8B1451BC4 (33 samples, 0.11%)</title><rect x="52.2212%" y="309" width="0.1075%" height="15" fill="rgb(246,46,29)" fg:x="16034" fg:w="33"/><text x="52.2962%" y="319.50"></text></g><g><title>`0x7FF8B1451BC9 (26 samples, 0.08%)</title><rect x="52.3287%" y="309" width="0.0847%" height="15" fill="rgb(246,185,52)" fg:x="16067" fg:w="26"/><text x="52.4037%" y="319.50"></text></g><g><title>`0x7FF8B1451BCE (9 samples, 0.03%)</title><rect x="52.4134%" y="309" width="0.0293%" height="15" fill="rgb(252,136,11)" fg:x="16093" fg:w="9"/><text x="52.4884%" y="319.50"></text></g><g><title>`0x7FF8B1451BD3 (18 samples, 0.06%)</title><rect x="52.4427%" y="309" width="0.0586%" height="15" fill="rgb(219,138,53)" fg:x="16102" fg:w="18"/><text x="52.5177%" y="319.50"></text></g><g><title>`0x7FF8B1451BDB (12 samples, 0.04%)</title><rect x="52.5013%" y="309" width="0.0391%" height="15" fill="rgb(211,51,23)" fg:x="16120" fg:w="12"/><text x="52.5763%" y="319.50"></text></g><g><title>`0x7FF8B1451BE3 (12 samples, 0.04%)</title><rect x="52.5404%" y="309" width="0.0391%" height="15" fill="rgb(247,221,28)" fg:x="16132" fg:w="12"/><text x="52.6154%" y="319.50"></text></g><g><title>`0x7FF8B1451BEB (20 samples, 0.07%)</title><rect x="52.5795%" y="309" width="0.0651%" height="15" fill="rgb(251,222,45)" fg:x="16144" fg:w="20"/><text x="52.6545%" y="319.50"></text></g><g><title>`0x7FF8B1451BF3 (13 samples, 0.04%)</title><rect x="52.6446%" y="309" width="0.0423%" height="15" fill="rgb(217,162,53)" fg:x="16164" fg:w="13"/><text x="52.7196%" y="319.50"></text></g><g><title>`0x7FF8B1451BFA (11 samples, 0.04%)</title><rect x="52.6869%" y="309" width="0.0358%" height="15" fill="rgb(229,93,14)" fg:x="16177" fg:w="11"/><text x="52.7619%" y="319.50"></text></g><g><title>`0x7FF8B1451C01 (10 samples, 0.03%)</title><rect x="52.7228%" y="309" width="0.0326%" height="15" fill="rgb(209,67,49)" fg:x="16188" fg:w="10"/><text x="52.7978%" y="319.50"></text></g><g><title>`0x7FF8B1451C21 (6 samples, 0.02%)</title><rect x="52.7684%" y="309" width="0.0195%" height="15" fill="rgb(213,87,29)" fg:x="16202" fg:w="6"/><text x="52.8434%" y="319.50"></text></g><g><title>falcon-2.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;falcon_2::game::data::Move&gt;*, core::ptr::non_null::NonNull (619 samples, 2.02%)</title><rect x="53.1853%" y="293" width="2.0160%" height="15" fill="rgb(205,151,52)" fg:x="16330" fg:w="619"/><text x="53.2603%" y="303.50">falcon-2...</text></g><g><title>falcon-2.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter (1,382 samples, 4.50%)</title><rect x="52.8075%" y="309" width="4.5010%" height="15" fill="rgb(253,215,39)" fg:x="16214" fg:w="1382"/><text x="52.8825%" y="319.50">falcon-2.exe`core::slic..</text></g><g><title>falcon-2.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter (647 samples, 2.11%)</title><rect x="55.2013%" y="293" width="2.1072%" height="15" fill="rgb(221,220,41)" fg:x="16949" fg:w="647"/><text x="55.2763%" y="303.50">falcon-2...</text></g><g><title>falcon-2.exe`core::slice::iter::Iter&lt;falcon_2::game::data::Move&gt;::post_inc_start (647 samples, 2.11%)</title><rect x="55.2013%" y="277" width="2.1072%" height="15" fill="rgb(218,133,21)" fg:x="16949" fg:w="647"/><text x="55.2763%" y="287.50">falcon-2...</text></g><g><title>falcon-2.exe`core::ptr::non_null::NonNull&lt;falcon_2::game::data::Move&gt;::add(core::ptr::non_null::NonNull (647 samples, 2.11%)</title><rect x="55.2013%" y="261" width="2.1072%" height="15" fill="rgb(221,193,43)" fg:x="16949" fg:w="647"/><text x="55.2763%" y="271.50">falcon-2...</text></g><g><title>falcon-2.exe`falcon_2::game::Game::move_left (271 samples, 0.88%)</title><rect x="62.9299%" y="293" width="0.8826%" height="15" fill="rgb(240,128,52)" fg:x="19322" fg:w="271"/><text x="63.0049%" y="303.50">fa..</text></g><g><title>falcon-2.exe`falcon_2::game::CollisionMap::test (170 samples, 0.55%)</title><rect x="63.2589%" y="277" width="0.5537%" height="15" fill="rgb(253,114,12)" fg:x="19423" fg:w="170"/><text x="63.3339%" y="287.50">f..</text></g><g><title>falcon-2.exe`falcon_2::game::Game::move_right (310 samples, 1.01%)</title><rect x="63.8125%" y="293" width="1.0096%" height="15" fill="rgb(215,223,47)" fg:x="19593" fg:w="310"/><text x="63.8875%" y="303.50">fal..</text></g><g><title>falcon-2.exe`falcon_2::game::CollisionMap::test (155 samples, 0.50%)</title><rect x="64.3174%" y="277" width="0.5048%" height="15" fill="rgb(248,225,23)" fg:x="19748" fg:w="155"/><text x="64.3924%" y="287.50"></text></g><g><title>falcon-2.exe`falcon_2::game::CollisionMap::test (2,227 samples, 7.25%)</title><rect x="78.8725%" y="277" width="7.2531%" height="15" fill="rgb(250,108,0)" fg:x="24217" fg:w="2227"/><text x="78.9475%" y="287.50">falcon-2.exe`falcon_2::game::Collision..</text></g><g><title>falcon-2.exe`falcon_2::game::Game::rotate (7,851 samples, 25.57%)</title><rect x="64.8222%" y="293" width="25.5700%" height="15" fill="rgb(228,208,7)" fg:x="19903" fg:w="7851"/><text x="64.8972%" y="303.50">falcon-2.exe`falcon_2::game::Game::rotate</text></g><g><title>falcon-2.exe`falcon_2::game::data::KickTable::data (1,310 samples, 4.27%)</title><rect x="86.1256%" y="277" width="4.2665%" height="15" fill="rgb(244,45,10)" fg:x="26444" fg:w="1310"/><text x="86.2006%" y="287.50">falcon-2.exe`falcon_2:..</text></g><g><title>falcon-2.exe`falcon_2::game::data::KickTable::get_index (134 samples, 0.44%)</title><rect x="89.9557%" y="261" width="0.4364%" height="15" fill="rgb(207,125,25)" fg:x="27620" fg:w="134"/><text x="90.0307%" y="271.50"></text></g><g><title>falcon-2.exe`falcon_2::game::data::Move::run (12,956 samples, 42.20%)</title><rect x="57.3085%" y="309" width="42.1965%" height="15" fill="rgb(210,195,18)" fg:x="17596" fg:w="12956"/><text x="57.3835%" y="319.50">falcon-2.exe`falcon_2::game::data::Move::run</text></g><g><title>falcon-2.exe`falcon_2::game::Game::soft_drop (2,798 samples, 9.11%)</title><rect x="90.3921%" y="293" width="9.1128%" height="15" fill="rgb(249,80,12)" fg:x="27754" fg:w="2798"/><text x="90.4671%" y="303.50">falcon-2.exe`falcon_2::game::Game::soft_drop</text></g><g><title>falcon-2.exe`falcon_2::game::CollisionMap::test (499 samples, 1.63%)</title><rect x="97.8798%" y="277" width="1.6252%" height="15" fill="rgb(221,65,9)" fg:x="30053" fg:w="499"/><text x="97.9548%" y="287.50">falcon-..</text></g><g><title>falcon-2.exe`falcon_2::game::data::impl$23::eq (57 samples, 0.19%)</title><rect x="99.5050%" y="309" width="0.1856%" height="15" fill="rgb(235,49,36)" fg:x="30552" fg:w="57"/><text x="99.5800%" y="319.50"></text></g><g><title>falcon-2.exe`falcon_2::search::expand(falcon_2::game::Game*, unsigned long long[1024]*, tuple$ (24,212 samples, 78.86%)</title><rect x="20.8442%" y="325" width="78.8562%" height="15" fill="rgb(225,32,20)" fg:x="6400" fg:w="24212"/><text x="20.9192%" y="335.50">falcon-2.exe`falcon_2::search::expand(falcon_2::game::Game*, unsigned long long[1024]*, tuple$</text></g><g><title>falcon-2.exe`std::sys::pal::windows::stdio::is_console (4 samples, 0.01%)</title><rect x="99.7101%" y="85" width="0.0130%" height="15" fill="rgb(215,141,46)" fg:x="30615" fg:w="4"/><text x="99.7851%" y="95.50"></text></g><g><title>`0x7FF9354078C2 (4 samples, 0.01%)</title><rect x="99.7101%" y="69" width="0.0130%" height="15" fill="rgb(250,160,47)" fg:x="30615" fg:w="4"/><text x="99.7851%" y="79.50"></text></g><g><title>`0x7FF937C7C0A4 (4 samples, 0.01%)</title><rect x="99.7101%" y="53" width="0.0130%" height="15" fill="rgb(216,222,40)" fg:x="30615" fg:w="4"/><text x="99.7851%" y="63.50"></text></g><g><title>falcon-2.exe`std::io::stdio::impl$15::write_fmt (8 samples, 0.03%)</title><rect x="99.7101%" y="293" width="0.0261%" height="15" fill="rgb(234,217,39)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="303.50"></text></g><g><title>falcon-2.exe`std::io::stdio::impl$16::write_fmt (8 samples, 0.03%)</title><rect x="99.7101%" y="277" width="0.0261%" height="15" fill="rgb(207,178,40)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="287.50"></text></g><g><title>falcon-2.exe`std::io::Write::write_fmt (8 samples, 0.03%)</title><rect x="99.7101%" y="261" width="0.0261%" height="15" fill="rgb(221,136,13)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="271.50"></text></g><g><title>falcon-2.exe`core::fmt::write (8 samples, 0.03%)</title><rect x="99.7101%" y="245" width="0.0261%" height="15" fill="rgb(249,199,10)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="255.50"></text></g><g><title>falcon-2.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (8 samples, 0.03%)</title><rect x="99.7101%" y="229" width="0.0261%" height="15" fill="rgb(249,222,13)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="239.50"></text></g><g><title>falcon-2.exe`std::io::stdio::impl$19::write_all (8 samples, 0.03%)</title><rect x="99.7101%" y="213" width="0.0261%" height="15" fill="rgb(244,185,38)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="223.50"></text></g><g><title>falcon-2.exe`core::cell::RefCell::borrow_mut (8 samples, 0.03%)</title><rect x="99.7101%" y="197" width="0.0261%" height="15" fill="rgb(236,202,9)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="207.50"></text></g><g><title>falcon-2.exe`std::io::buffered::linewritershim::impl$1::write_all (8 samples, 0.03%)</title><rect x="99.7101%" y="181" width="0.0261%" height="15" fill="rgb(250,229,37)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="191.50"></text></g><g><title>falcon-2.exe`core::result::impl$26::branch (8 samples, 0.03%)</title><rect x="99.7101%" y="165" width="0.0261%" height="15" fill="rgb(206,174,23)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="175.50"></text></g><g><title>falcon-2.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (8 samples, 0.03%)</title><rect x="99.7101%" y="149" width="0.0261%" height="15" fill="rgb(211,33,43)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="159.50"></text></g><g><title>falcon-2.exe`std::io::stdio::impl$1::write (8 samples, 0.03%)</title><rect x="99.7101%" y="133" width="0.0261%" height="15" fill="rgb(245,58,50)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="143.50"></text></g><g><title>falcon-2.exe`std::io::stdio::handle_ebadf (8 samples, 0.03%)</title><rect x="99.7101%" y="117" width="0.0261%" height="15" fill="rgb(244,68,36)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="127.50"></text></g><g><title>falcon-2.exe`std::sys::pal::windows::stdio::write (8 samples, 0.03%)</title><rect x="99.7101%" y="101" width="0.0261%" height="15" fill="rgb(232,229,15)" fg:x="30615" fg:w="8"/><text x="99.7851%" y="111.50"></text></g><g><title>falcon-2.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (30,589 samples, 99.63%)</title><rect x="0.1140%" y="373" width="99.6255%" height="15" fill="rgb(254,30,23)" fg:x="35" fg:w="30589"/><text x="0.1890%" y="383.50">falcon-2.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>falcon-2.exe`falcon_2::main (30,589 samples, 99.63%)</title><rect x="0.1140%" y="357" width="99.6255%" height="15" fill="rgb(235,160,14)" fg:x="35" fg:w="30589"/><text x="0.1890%" y="367.50">falcon-2.exe`falcon_2::main</text></g><g><title>falcon-2.exe`falcon_2::search::search (30,588 samples, 99.62%)</title><rect x="0.1172%" y="341" width="99.6222%" height="15" fill="rgb(212,155,44)" fg:x="36" fg:w="30588"/><text x="0.1922%" y="351.50">falcon-2.exe`falcon_2::search::search</text></g><g><title>falcon-2.exe`std::io::stdio::_print (10 samples, 0.03%)</title><rect x="99.7069%" y="325" width="0.0326%" height="15" fill="rgb(226,2,50)" fg:x="30614" fg:w="10"/><text x="99.7819%" y="335.50"></text></g><g><title>falcon-2.exe`std::io::stdio::print_to (9 samples, 0.03%)</title><rect x="99.7101%" y="309" width="0.0293%" height="15" fill="rgb(234,177,6)" fg:x="30615" fg:w="9"/><text x="99.7851%" y="319.50"></text></g><g><title>`0x7FF937BD14FC (30,621 samples, 99.73%)</title><rect x="0.0130%" y="453" width="99.7297%" height="15" fill="rgb(217,24,9)" fg:x="4" fg:w="30621"/><text x="0.0880%" y="463.50">`0x7FF937BD14FC</text></g><g><title>`0x7FF935C8E8D7 (30,621 samples, 99.73%)</title><rect x="0.0130%" y="437" width="99.7297%" height="15" fill="rgb(220,13,46)" fg:x="4" fg:w="30621"/><text x="0.0880%" y="447.50">`0x7FF935C8E8D7</text></g><g><title>falcon-2.exe`__scrt_common_main_seh() (30,605 samples, 99.68%)</title><rect x="0.0651%" y="421" width="99.6776%" height="15" fill="rgb(239,221,27)" fg:x="20" fg:w="30605"/><text x="0.1401%" y="431.50">falcon-2.exe`__scrt_common_main_seh()</text></g><g><title>falcon-2.exe`invoke_main() (30,590 samples, 99.63%)</title><rect x="0.1140%" y="405" width="99.6287%" height="15" fill="rgb(222,198,25)" fg:x="35" fg:w="30590"/><text x="0.1890%" y="415.50">falcon-2.exe`invoke_main()</text></g><g><title>falcon-2.exe`main (30,590 samples, 99.63%)</title><rect x="0.1140%" y="389" width="99.6287%" height="15" fill="rgb(211,99,13)" fg:x="35" fg:w="30590"/><text x="0.1890%" y="399.50">falcon-2.exe`main</text></g><g><title>`0x7FF937B775CE (6 samples, 0.02%)</title><rect x="99.8111%" y="277" width="0.0195%" height="15" fill="rgb(232,111,31)" fg:x="30646" fg:w="6"/><text x="99.8861%" y="287.50"></text></g><g><title>`0x7FF937B793EB (5 samples, 0.02%)</title><rect x="99.8144%" y="261" width="0.0163%" height="15" fill="rgb(245,82,37)" fg:x="30647" fg:w="5"/><text x="99.8894%" y="271.50"></text></g><g><title>`0x7FF937B6EBD1 (5 samples, 0.02%)</title><rect x="99.8144%" y="245" width="0.0163%" height="15" fill="rgb(227,149,46)" fg:x="30647" fg:w="5"/><text x="99.8894%" y="255.50"></text></g><g><title>`0x7FF937B76002 (14 samples, 0.05%)</title><rect x="99.8013%" y="341" width="0.0456%" height="15" fill="rgb(218,36,50)" fg:x="30643" fg:w="14"/><text x="99.8763%" y="351.50"></text></g><g><title>`0x7FF937B616E7 (14 samples, 0.05%)</title><rect x="99.8013%" y="325" width="0.0456%" height="15" fill="rgb(226,80,48)" fg:x="30643" fg:w="14"/><text x="99.8763%" y="335.50"></text></g><g><title>`0x7FF937B6EBD1 (14 samples, 0.05%)</title><rect x="99.8013%" y="309" width="0.0456%" height="15" fill="rgb(238,224,15)" fg:x="30643" fg:w="14"/><text x="99.8763%" y="319.50"></text></g><g><title>`0x7FF937B70739 (12 samples, 0.04%)</title><rect x="99.8078%" y="293" width="0.0391%" height="15" fill="rgb(241,136,10)" fg:x="30645" fg:w="12"/><text x="99.8828%" y="303.50"></text></g><g><title>`0x7FF937B77742 (5 samples, 0.02%)</title><rect x="99.8306%" y="277" width="0.0163%" height="15" fill="rgb(208,32,45)" fg:x="30652" fg:w="5"/><text x="99.9056%" y="287.50"></text></g><g><title>`0x7FF935358E6E (4 samples, 0.01%)</title><rect x="99.8632%" y="229" width="0.0130%" height="15" fill="rgb(207,135,9)" fg:x="30662" fg:w="4"/><text x="99.9382%" y="239.50"></text></g><g><title>`0x7FF9353575F8 (4 samples, 0.01%)</title><rect x="99.8632%" y="213" width="0.0130%" height="15" fill="rgb(206,86,44)" fg:x="30662" fg:w="4"/><text x="99.9382%" y="223.50"></text></g><g><title>`0x7FF93543238D (12 samples, 0.04%)</title><rect x="99.8502%" y="245" width="0.0391%" height="15" fill="rgb(245,177,15)" fg:x="30658" fg:w="12"/><text x="99.9252%" y="255.50"></text></g><g><title>`0x7FF935358EAE (4 samples, 0.01%)</title><rect x="99.8762%" y="229" width="0.0130%" height="15" fill="rgb(206,64,50)" fg:x="30666" fg:w="4"/><text x="99.9512%" y="239.50"></text></g><g><title>`0x7FF935356370 (4 samples, 0.01%)</title><rect x="99.8762%" y="213" width="0.0130%" height="15" fill="rgb(234,36,40)" fg:x="30666" fg:w="4"/><text x="99.9512%" y="223.50"></text></g><g><title>`0x7FF937B9F33C (34 samples, 0.11%)</title><rect x="99.7981%" y="389" width="0.1107%" height="15" fill="rgb(213,64,8)" fg:x="30642" fg:w="34"/><text x="99.8731%" y="399.50"></text></g><g><title>`0x7FF937B39B30 (34 samples, 0.11%)</title><rect x="99.7981%" y="373" width="0.1107%" height="15" fill="rgb(210,75,36)" fg:x="30642" fg:w="34"/><text x="99.8731%" y="383.50"></text></g><g><title>`0x7FF937B75CA0 (33 samples, 0.11%)</title><rect x="99.8013%" y="357" width="0.1075%" height="15" fill="rgb(229,88,21)" fg:x="30643" fg:w="33"/><text x="99.8763%" y="367.50"></text></g><g><title>`0x7FF937B76094 (18 samples, 0.06%)</title><rect x="99.8502%" y="341" width="0.0586%" height="15" fill="rgb(252,204,47)" fg:x="30658" fg:w="18"/><text x="99.9252%" y="351.50"></text></g><g><title>`0x7FF937B56E7B (18 samples, 0.06%)</title><rect x="99.8502%" y="325" width="0.0586%" height="15" fill="rgb(208,77,27)" fg:x="30658" fg:w="18"/><text x="99.9252%" y="335.50"></text></g><g><title>`0x7FF937B56D46 (18 samples, 0.06%)</title><rect x="99.8502%" y="309" width="0.0586%" height="15" fill="rgb(221,76,26)" fg:x="30658" fg:w="18"/><text x="99.9252%" y="319.50"></text></g><g><title>`0x7FF937B56D1A (18 samples, 0.06%)</title><rect x="99.8502%" y="293" width="0.0586%" height="15" fill="rgb(225,139,18)" fg:x="30658" fg:w="18"/><text x="99.9252%" y="303.50"></text></g><g><title>`0x7FF937B57BDC (18 samples, 0.06%)</title><rect x="99.8502%" y="277" width="0.0586%" height="15" fill="rgb(230,137,11)" fg:x="30658" fg:w="18"/><text x="99.9252%" y="287.50"></text></g><g><title>`0x7FF937B58830 (18 samples, 0.06%)</title><rect x="99.8502%" y="261" width="0.0586%" height="15" fill="rgb(212,28,1)" fg:x="30658" fg:w="18"/><text x="99.9252%" y="271.50"></text></g><g><title>`0x7FF937BCA145 (38 samples, 0.12%)</title><rect x="99.7981%" y="405" width="0.1238%" height="15" fill="rgb(248,164,17)" fg:x="30642" fg:w="38"/><text x="99.8731%" y="415.50"></text></g><g><title>`0x7FF937BCA239 (8 samples, 0.03%)</title><rect x="99.9251%" y="405" width="0.0261%" height="15" fill="rgb(222,171,42)" fg:x="30681" fg:w="8"/><text x="100.0001%" y="415.50"></text></g><g><title>`0x7FF937B775CE (8 samples, 0.03%)</title><rect x="99.9251%" y="389" width="0.0261%" height="15" fill="rgb(243,84,45)" fg:x="30681" fg:w="8"/><text x="100.0001%" y="399.50"></text></g><g><title>`0x7FF937B793EB (7 samples, 0.02%)</title><rect x="99.9283%" y="373" width="0.0228%" height="15" fill="rgb(252,49,23)" fg:x="30682" fg:w="7"/><text x="100.0033%" y="383.50"></text></g><g><title>`0x7FF937B6EBD1 (6 samples, 0.02%)</title><rect x="99.9316%" y="357" width="0.0195%" height="15" fill="rgb(215,19,7)" fg:x="30683" fg:w="6"/><text x="100.0066%" y="367.50"></text></g><g><title>`0x7FF937B56D1A (5 samples, 0.02%)</title><rect x="99.9577%" y="373" width="0.0163%" height="15" fill="rgb(238,81,41)" fg:x="30691" fg:w="5"/><text x="100.0327%" y="383.50"></text></g><g><title>`0x7FF937B57BDC (5 samples, 0.02%)</title><rect x="99.9577%" y="357" width="0.0163%" height="15" fill="rgb(210,199,37)" fg:x="30691" fg:w="5"/><text x="100.0327%" y="367.50"></text></g><g><title>`0x7FF937B58830 (5 samples, 0.02%)</title><rect x="99.9577%" y="341" width="0.0163%" height="15" fill="rgb(244,192,49)" fg:x="30691" fg:w="5"/><text x="100.0327%" y="351.50"></text></g><g><title>`0x7FF937BCA349 (12 samples, 0.04%)</title><rect x="99.9577%" y="405" width="0.0391%" height="15" fill="rgb(226,211,11)" fg:x="30691" fg:w="12"/><text x="100.0327%" y="415.50"></text></g><g><title>`0x7FF937B56D46 (12 samples, 0.04%)</title><rect x="99.9577%" y="389" width="0.0391%" height="15" fill="rgb(236,162,54)" fg:x="30691" fg:w="12"/><text x="100.0327%" y="399.50"></text></g><g><title>`0x7FF937B56D46 (7 samples, 0.02%)</title><rect x="99.9739%" y="373" width="0.0228%" height="15" fill="rgb(220,229,9)" fg:x="30696" fg:w="7"/><text x="100.0489%" y="383.50"></text></g><g><title>`0x7FF937B56D1A (7 samples, 0.02%)</title><rect x="99.9739%" y="357" width="0.0228%" height="15" fill="rgb(250,87,22)" fg:x="30696" fg:w="7"/><text x="100.0489%" y="367.50"></text></g><g><title>`0x7FF937B57BDC (7 samples, 0.02%)</title><rect x="99.9739%" y="341" width="0.0228%" height="15" fill="rgb(239,43,17)" fg:x="30696" fg:w="7"/><text x="100.0489%" y="351.50"></text></g><g><title>`0x7FF937B58830 (7 samples, 0.02%)</title><rect x="99.9739%" y="325" width="0.0228%" height="15" fill="rgb(231,177,25)" fg:x="30696" fg:w="7"/><text x="100.0489%" y="335.50"></text></g><g><title>`0x7FF934DC6E26 (6 samples, 0.02%)</title><rect x="99.9772%" y="309" width="0.0195%" height="15" fill="rgb(219,179,1)" fg:x="30697" fg:w="6"/><text x="100.0522%" y="319.50"></text></g><g><title>`0x7FF934E2AD56 (6 samples, 0.02%)</title><rect x="99.9772%" y="293" width="0.0195%" height="15" fill="rgb(238,219,53)" fg:x="30697" fg:w="6"/><text x="100.0522%" y="303.50"></text></g><g><title>all (30,704 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="30704"/><text x="0.0750%" y="479.50"></text></g><g><title>`0x7FF937C0B1EE (79 samples, 0.26%)</title><rect x="99.7427%" y="453" width="0.2573%" height="15" fill="rgb(244,19,51)" fg:x="30625" fg:w="79"/><text x="99.8177%" y="463.50"></text></g><g><title>`0x7FF937C398FB (77 samples, 0.25%)</title><rect x="99.7492%" y="437" width="0.2508%" height="15" fill="rgb(224,6,22)" fg:x="30627" fg:w="77"/><text x="99.8242%" y="447.50"></text></g><g><title>`0x7FF937BC8540 (76 samples, 0.25%)</title><rect x="99.7525%" y="421" width="0.2475%" height="15" fill="rgb(224,145,5)" fg:x="30628" fg:w="76"/><text x="99.8275%" y="431.50"></text></g></svg></svg>